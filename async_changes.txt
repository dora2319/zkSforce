In order to remove the deprecated calls to [NSURLConnection sendSynchronousRequest:]
the HTTP methods move to URLSession, which has an entirely sync API.

BaseClient has been reworked to use URLSession instead, and includes wrapper that provides
the original synchronous sendRequest: function. But that should get deprecated.

The synchronous methods on SforceClient will be marked deprecated and later removed
when they're removed, sendRequest can be removed as well.

Making everything async complicates a few things.

- The async versions are all called performXXX, which makes sense when there are sync versions also
  available, but when the sync version is deprecated, it'd be nice if we could remove the 'perform'
  prefix. As the parameter types are different to the sync version, perhaps they can be renamed now
  and the perform versions marked as deprcated as well. 
  
- The async versions used to wrap the sync versions. Now the async versions are the real versions
  The sync versions have a separate path that reuse a lot of code, but don't wrap the async version
  Need to ensure special behavour is preserved for both paths. The callbacks on the main thread
  for the async versions make wrapping them problematic for the sync path. perhaps generate a more
  complex async version that the exposed sync & async methods can reuse?
  
- Some methods have hand crafted implementations that do special things. There's a new
  generated class in the class heirachry that provides all the code generated from the WSDL
  by making it a separate class, the SforceClient can override it where needed.

- The client objects manage a bunch of state and were documented as not concurrent safe.
  Async everywhere makes this make much less sense, need to clean up and check state management.

- checkSession is called in a lot of places, but may need to make an API request, so this
  needs reworking.
  
- In general the auth flows also need updating to be async.

- Are there other random callers of sendRequest: [perhaps auth or describe helpers].

- Need to look at search

- There's a lot of code generated into the BaseSforceClient, should this be re-org'd into
  a type that represents the operation? it might be hard to standardize the API to operation
  to make that viable.
  
- Random sync method methods that might need to make an HTTP request
  checkSession
  currentUserInfo
  
- That baseClient keeps hold of the last set of headers is much less useful with it being
  async. As they're already exposed by the delegate, perhaps that can go away.
  
- A bunch of changes are in the generated code, see the async branch of the WSDL2ZKSforce repo.
