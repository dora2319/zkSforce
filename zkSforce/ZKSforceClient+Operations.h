// Copyright (c) 2013 Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce. 
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "zkSforceClient.h"

@class ZKChangeOwnPasswordResult;
@class ZKDescribeAppMenuResult;
@class ZKDescribeApprovalLayoutResult;
@class ZKDescribeCompactLayoutsResult;
@class ZKDescribeGlobalTheme;
@class ZKDescribeLayoutResult;
@class ZKDescribePathAssistantsResult;
@class ZKDescribeSObject;
@class ZKDescribeSoftphoneLayoutResult;
@class ZKDescribeSoqlListViewResult;
@class ZKDescribeSoqlListViewsRequest;
@class ZKDescribeThemeResult;
@class ZKDescribeVisualForceResult;
@class ZKExecuteListViewRequest;
@class ZKExecuteListViewResult;
@class ZKGetDeletedResult;
@class ZKGetServerTimestampResult;
@class ZKGetUpdatedResult;
@class ZKKnowledgeSettings;
@class ZKQueryResult;
@class ZKRenderStoredEmailTemplateRequest;
@class ZKRenderStoredEmailTemplateResult;
@class ZKResetPasswordResult;
@class ZKSetPasswordResult;
@class ZKUserInfo;

/** All methods in this category are deprecated, please migrate to the async equivalent */
@interface ZKSforceClient (Operations)

/** Describe an sObject */
-(ZKDescribeSObject *)describeSObject:(NSString *)sObjectType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSObject instead");

/** Describe multiple sObjects (upto 100) */
-(NSArray *)describeSObjects:(NSArray *)sObjectType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSObjects instead");

/** Describe the Global state */
-(NSArray *)describeGlobal DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeGlobal instead");

/** Describe all the data category groups available for a given set of types */
-(NSArray *)describeDataCategoryGroups:(NSArray *)sObjectType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeDataCategoryGroups instead");

/** Describe the data category group structures for a given set of pair of types and data category group name */
-(NSArray *)describeDataCategoryGroupStructures:(NSArray *)pairs topCategoriesOnly:(BOOL)topCategoriesOnly DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeDataCategoryGroupStructures instead");

/** Describe your Data Category Mappings. */
-(NSArray *)describeDataCategoryMappings DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeDataCategoryMappings instead");

/** Describes your Knowledge settings, such as if knowledgeEnabled is on or off, its default language and supported languages */
-(ZKKnowledgeSettings *)describeKnowledgeSettings DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeKnowledgeSettings instead");

/** Describe the items in an AppMenu */
-(ZKDescribeAppMenuResult *)describeAppMenu:(NSString *)appMenuType networkId:(NSString *)networkId DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeAppMenu instead");

/** Describe Gloal and Themes */
-(ZKDescribeGlobalTheme *)describeGlobalTheme DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeGlobalTheme instead");

/** Describe Themes */
-(ZKDescribeThemeResult *)describeTheme:(NSArray *)sobjectType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeTheme instead");

/** Describe the layout of the given sObject or the given actionable global page. */
-(ZKDescribeLayoutResult *)describeLayout:(NSString *)sObjectType layoutName:(NSString *)layoutName recordTypeIds:(NSArray *)recordTypeIds DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeLayout instead");

/** Describe the layout of the SoftPhone */
-(ZKDescribeSoftphoneLayoutResult *)describeSoftphoneLayout DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSoftphoneLayout instead");

/** Describe the search view of an sObject */
-(NSArray *)describeSearchLayouts:(NSArray *)sObjectType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSearchLayouts instead");

/** Describe a list of entity names that reflects the current user's searchable entities */
-(NSArray *)describeSearchableEntities:(BOOL)includeOnlyEntitiesWithTabs DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSearchableEntities instead");

/** Describe a list of objects representing the order and scope of objects on a users search result page */
-(NSArray *)describeSearchScopeOrder:(BOOL)includeRealTimeEntities DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSearchScopeOrder instead");

/** Describe the compact layouts of the given sObject */
-(ZKDescribeCompactLayoutsResult *)describeCompactLayouts:(NSString *)sObjectType recordTypeIds:(NSArray *)recordTypeIds DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeCompactLayouts instead");

/** Describe the Path Assistants for the given sObject and optionally RecordTypes */
-(ZKDescribePathAssistantsResult *)describePathAssistants:(NSString *)sObjectType picklistValue:(NSString *)picklistValue recordTypeIds:(NSArray *)recordTypeIds DEPRECATED_MSG_ATTRIBUTE("Please use performDescribePathAssistants instead");

/** Describe the approval layouts of the given sObject */
-(ZKDescribeApprovalLayoutResult *)describeApprovalLayout:(NSString *)sObjectType approvalProcessNames:(NSArray *)approvalProcessNames DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeApprovalLayout instead");

/** Describe the ListViews as SOQL metadata for the generation of SOQL. */
-(ZKDescribeSoqlListViewResult *)describeSoqlListViews:(ZKDescribeSoqlListViewsRequest *)request DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSoqlListViews instead");

/** Execute the specified list view and return the presentation-ready results. */
-(ZKExecuteListViewResult *)executeListView:(ZKExecuteListViewRequest *)request DEPRECATED_MSG_ATTRIBUTE("Please use performExecuteListView instead");

/** Describe the ListViews of a SObject as SOQL metadata for the generation of SOQL. */
-(ZKDescribeSoqlListViewResult *)describeSObjectListViews:(NSString *)sObjectType recentsOnly:(BOOL)recentsOnly isSoqlCompatible:(NSString *)isSoqlCompatible limit:(NSInteger)limit offset:(NSInteger)offset DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeSObjectListViews instead");

/** Describe the tabs that appear on a users page */
-(NSArray *)describeTabs DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeTabs instead");

/** Describe all tabs available to a user */
-(NSArray *)describeAllTabs DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeAllTabs instead");

/** Describe the primary compact layouts for the sObjects requested */
-(NSArray *)describePrimaryCompactLayouts:(NSArray *)sObjectTypes DEPRECATED_MSG_ATTRIBUTE("Please use performDescribePrimaryCompactLayouts instead");

/** Update or insert a set of sObjects based on object id */
-(NSArray *)upsert:(NSString *)externalIDFieldName sObjects:(NSArray *)sObjects DEPRECATED_MSG_ATTRIBUTE("Please use performUpsert instead");

/** Merge and update a set of sObjects based on object id */
-(NSArray *)merge:(NSArray *)request DEPRECATED_MSG_ATTRIBUTE("Please use performMerge instead");

/** Delete a set of sObjects */
-(NSArray *)delete:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performDelete instead");

/** Undelete a set of sObjects */
-(NSArray *)undelete:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performUndelete instead");

/** Empty a set of sObjects from the recycle bin */
-(NSArray *)emptyRecycleBin:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performEmptyRecycleBin instead");

/** Get a set of sObjects */
-(NSDictionary *)retrieve:(NSString *)fieldList sObjectType:(NSString *)sObjectType ids:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performRetrieve instead");

/** Submit an entity to a workflow process or process a workitem */
-(NSArray *)process:(NSArray *)actions DEPRECATED_MSG_ATTRIBUTE("Please use performProcess instead");

/** convert a set of leads */
-(NSArray *)convertLead:(NSArray *)leadConverts DEPRECATED_MSG_ATTRIBUTE("Please use performConvertLead instead");

/** Logout the current user, invalidating the current session. */
-(void)logout DEPRECATED_MSG_ATTRIBUTE("Please use performLogout instead");

/** Logs out and invalidates session ids */
-(NSArray *)invalidateSessions:(NSArray *)sessionIds DEPRECATED_MSG_ATTRIBUTE("Please use performInvalidateSessions instead");

/** Get the IDs for deleted sObjects */
-(ZKGetDeletedResult *)getDeleted:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate DEPRECATED_MSG_ATTRIBUTE("Please use performGetDeleted instead");

/** Get the IDs for updated sObjects */
-(ZKGetUpdatedResult *)getUpdated:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate DEPRECATED_MSG_ATTRIBUTE("Please use performGetUpdated instead");

/** Create a Query Cursor */
-(ZKQueryResult *)query:(NSString *)queryString DEPRECATED_MSG_ATTRIBUTE("Please use performQuery instead");

/** Create a Query Cursor, including deleted sObjects */
-(ZKQueryResult *)queryAll:(NSString *)queryString DEPRECATED_MSG_ATTRIBUTE("Please use performQueryAll instead");

/** Gets the next batch of sObjects from a query */
-(ZKQueryResult *)queryMore:(NSString *)queryLocator DEPRECATED_MSG_ATTRIBUTE("Please use performQueryMore instead");

/** Gets server timestamp */
-(ZKGetServerTimestampResult *)getServerTimestamp DEPRECATED_MSG_ATTRIBUTE("Please use performGetServerTimestamp instead");

/** Set a user's password */
-(ZKSetPasswordResult *)setPassword:(NSString *)userId password:(NSString *)password DEPRECATED_MSG_ATTRIBUTE("Please use performSetPassword instead");

/** Change the current user's password */
-(ZKChangeOwnPasswordResult *)changeOwnPassword:(NSString *)oldPassword newPassword:(NSString *)newPassword DEPRECATED_MSG_ATTRIBUTE("Please use performChangeOwnPassword instead");

/** Reset a user's password */
-(ZKResetPasswordResult *)resetPassword:(NSString *)userId DEPRECATED_MSG_ATTRIBUTE("Please use performResetPassword instead");

/** Returns standard information relevant to the current user */
-(ZKUserInfo *)getUserInfo DEPRECATED_MSG_ATTRIBUTE("Please use performGetUserInfo instead");

/** Delete a set of sObjects by example. The passed SOBject is a template for the object to delete */
-(NSArray *)deleteByExample:(NSArray *)sObjects DEPRECATED_MSG_ATTRIBUTE("Please use performDeleteByExample instead");

/** Send existing draft EmailMessage */
-(NSArray *)sendEmailMessage:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performSendEmailMessage instead");

/** Send outbound email */
-(NSArray *)sendEmail:(NSArray *)messages DEPRECATED_MSG_ATTRIBUTE("Please use performSendEmail instead");

/** Perform a template merge on one or more blocks of text. */
-(NSArray *)renderEmailTemplate:(NSArray *)renderRequests DEPRECATED_MSG_ATTRIBUTE("Please use performRenderEmailTemplate instead");

/** Perform a template merge using an email template stored in the database. */
-(ZKRenderStoredEmailTemplateResult *)renderStoredEmailTemplate:(ZKRenderStoredEmailTemplateRequest *)request DEPRECATED_MSG_ATTRIBUTE("Please use performRenderStoredEmailTemplate instead");

/** Perform a series of predefined actions such as quick create or log a task */
-(NSArray *)performQuickActions:(NSArray *)quickActions DEPRECATED_MSG_ATTRIBUTE("Please use performPerformQuickActions instead");

/** Describe the details of a series of quick actions */
-(NSArray *)describeQuickActions:(NSArray *)quickActions DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeQuickActions instead");

/** Describe the details of a series of quick actions in context of requested recordType id for Update actions */
-(NSArray *)describeQuickActionsForRecordType:(NSArray *)quickActions recordTypeId:(NSString *)recordTypeId DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeQuickActionsForRecordType instead");

/** Describe the details of a series of quick actions available for the given contextType */
-(NSArray *)describeAvailableQuickActions:(NSString *)contextType DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeAvailableQuickActions instead");

/** Retrieve the template sobjects, if appropriate, for the given quick action names in a given context */
-(NSArray *)retrieveQuickActionTemplates:(NSArray *)quickActionNames contextId:(NSString *)contextId DEPRECATED_MSG_ATTRIBUTE("Please use performRetrieveQuickActionTemplates instead");

/** Retrieve the template sobjects, if appropriate, for the given quick action names in a given contexts when used a mass quick action */
-(NSArray *)retrieveMassQuickActionTemplates:(NSString *)quickActionName contextIds:(NSArray *)contextIds DEPRECATED_MSG_ATTRIBUTE("Please use performRetrieveMassQuickActionTemplates instead");

/** Describe visualforce for an org */
-(ZKDescribeVisualForceResult *)describeVisualForce:(BOOL)includeAllDetails namespacePrefix:(NSString *)namespacePrefix DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeVisualForce instead");

/** Find duplicates for a set of sObjects */
-(NSArray *)findDuplicates:(NSArray *)sObjects DEPRECATED_MSG_ATTRIBUTE("Please use performFindDuplicates instead");

/** Find duplicates for a set of ids */
-(NSArray *)findDuplicatesByIds:(NSArray *)ids DEPRECATED_MSG_ATTRIBUTE("Please use performFindDuplicatesByIds instead");

/** Return the renameable nouns from the server for use in presentation using the salesforce grammar engine */
-(NSArray *)describeNouns:(NSArray *)nouns onlyRenamed:(BOOL)onlyRenamed includeFields:(BOOL)includeFields DEPRECATED_MSG_ATTRIBUTE("Please use performDescribeNouns instead");

@end
