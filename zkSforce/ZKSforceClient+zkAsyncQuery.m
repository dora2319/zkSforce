// Copyright (c) 2011,2013 Jonathan Hersh, Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce. 
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKSforceClient+zkAsyncQuery.h"

@implementation ZKSforceBaseClient (zkAsyncQuery)

-(BOOL)confirmLoggedIn {
//    if (!self.loggedIn) {
//        NSLog(@"ZKSforceClient does not have a valid session. request not executed");
//        return NO;
//    }
	return YES;
}

-(BOOL)handledError:(NSException *)ex failBlock:(zkFailWithExceptionBlock)failBlock {
	if (ex == nil) {
		return NO;
	}
	if (failBlock != nil) {
		dispatch_async(dispatch_get_main_queue(), ^{
			failBlock(ex);
		});
	}
	return YES;
}

/** Login to the Salesforce.com SOAP Api */
-(void) performLogin:(NSString *)username password:(NSString *)password
           failBlock:(zkFailWithExceptionBlock)failBlock
       completeBlock:(zkCompleteLoginResultBlock)completeBlock {

	NSString *payload = [self makeLoginEnv:username password:password];
	[self startRequest:payload name:@"login" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKLoginResult *result = [self makeLoginResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

-(ZKDescribeSObject *)preHook_describeSObject:(NSString *)sObjectType { return nil; }
-(ZKDescribeSObject *)postHook_describeSObject:(ZKDescribeSObject *)r { return r; }

/** Describe an sObject */
-(void) performDescribeSObject:(NSString *)sObjectType
                     failBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteDescribeSObjectBlock)completeBlock {

	ZKDescribeSObject *shortcut = [self preHook_describeSObject:sObjectType];
	if (shortcut != nil) {
		dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(shortcut);
		});
		return;
	}
	NSString *payload = [self makeDescribeSObjectEnv:sObjectType];
	[self startRequest:payload name:@"describeSObject" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeSObject *result = [self postHook_describeSObject:[self makeDescribeSObjectResult:root]];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe multiple sObjects (upto 100) */
-(void) performDescribeSObjects:(NSArray *)sObjectType
                      failBlock:(zkFailWithExceptionBlock)failBlock
                  completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeSObjectsEnv:sObjectType];
	[self startRequest:payload name:@"describeSObjects" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeSObjectsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

-(NSArray *)preHook_describeGlobal { return nil; }
-(NSArray *)postHook_describeGlobal:(NSArray *)r { return r; }

/** Describe the Global state */
-(void) performDescribeGlobalWithFailBlock:(zkFailWithExceptionBlock)failBlock
                completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSArray *shortcut = [self preHook_describeGlobal];
	if (shortcut != nil) {
		dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(shortcut);
		});
		return;
	}
	NSString *payload = [self makeDescribeGlobalEnv];
	[self startRequest:payload name:@"describeGlobal" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self postHook_describeGlobal:[self makeDescribeGlobalResult:root]];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe all the data category groups available for a given set of types */
-(void) performDescribeDataCategoryGroups:(NSArray *)sObjectType
                                failBlock:(zkFailWithExceptionBlock)failBlock
                            completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeDataCategoryGroupsEnv:sObjectType];
	[self startRequest:payload name:@"describeDataCategoryGroups" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeDataCategoryGroupsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the data category group structures for a given set of pair of types and data category group name */
-(void) performDescribeDataCategoryGroupStructures:(NSArray *)pairs topCategoriesOnly:(BOOL)topCategoriesOnly
                                         failBlock:(zkFailWithExceptionBlock)failBlock
                                     completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeDataCategoryGroupStructuresEnv:pairs topCategoriesOnly:topCategoriesOnly];
	[self startRequest:payload name:@"describeDataCategoryGroupStructures" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeDataCategoryGroupStructuresResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe your Data Category Mappings. */
-(void) performDescribeDataCategoryMappingsWithFailBlock:(zkFailWithExceptionBlock)failBlock
                              completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeDataCategoryMappingsEnv];
	[self startRequest:payload name:@"describeDataCategoryMappings" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeDataCategoryMappingsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describes your Knowledge settings, such as if knowledgeEnabled is on or off, its default language and supported languages */
-(void) performDescribeKnowledgeSettingsWithFailBlock:(zkFailWithExceptionBlock)failBlock
                           completeBlock:(zkCompleteKnowledgeSettingsBlock)completeBlock {

	NSString *payload = [self makeDescribeKnowledgeSettingsEnv];
	[self startRequest:payload name:@"describeKnowledgeSettings" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKKnowledgeSettings *result = [self makeDescribeKnowledgeSettingsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the items in an AppMenu */
-(void) performDescribeAppMenu:(NSString *)appMenuType networkId:(NSString *)networkId
                     failBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteDescribeAppMenuResultBlock)completeBlock {

	NSString *payload = [self makeDescribeAppMenuEnv:appMenuType networkId:networkId];
	[self startRequest:payload name:@"describeAppMenu" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeAppMenuResult *result = [self makeDescribeAppMenuResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe Gloal and Themes */
-(void) performDescribeGlobalThemeWithFailBlock:(zkFailWithExceptionBlock)failBlock
                     completeBlock:(zkCompleteDescribeGlobalThemeBlock)completeBlock {

	NSString *payload = [self makeDescribeGlobalThemeEnv];
	[self startRequest:payload name:@"describeGlobalTheme" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeGlobalTheme *result = [self makeDescribeGlobalThemeResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe Themes */
-(void) performDescribeTheme:(NSArray *)sobjectType
                   failBlock:(zkFailWithExceptionBlock)failBlock
               completeBlock:(zkCompleteDescribeThemeResultBlock)completeBlock {

	NSString *payload = [self makeDescribeThemeEnv:sobjectType];
	[self startRequest:payload name:@"describeTheme" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeThemeResult *result = [self makeDescribeThemeResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the layout of the given sObject or the given actionable global page. */
-(void) performDescribeLayout:(NSString *)sObjectType layoutName:(NSString *)layoutName recordTypeIds:(NSArray *)recordTypeIds
                    failBlock:(zkFailWithExceptionBlock)failBlock
                completeBlock:(zkCompleteDescribeLayoutResultBlock)completeBlock {

	NSString *payload = [self makeDescribeLayoutEnv:sObjectType layoutName:layoutName recordTypeIds:recordTypeIds];
	[self startRequest:payload name:@"describeLayout" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeLayoutResult *result = [self makeDescribeLayoutResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the layout of the SoftPhone */
-(void) performDescribeSoftphoneLayoutWithFailBlock:(zkFailWithExceptionBlock)failBlock
                         completeBlock:(zkCompleteDescribeSoftphoneLayoutResultBlock)completeBlock {

	NSString *payload = [self makeDescribeSoftphoneLayoutEnv];
	[self startRequest:payload name:@"describeSoftphoneLayout" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeSoftphoneLayoutResult *result = [self makeDescribeSoftphoneLayoutResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the search view of an sObject */
-(void) performDescribeSearchLayouts:(NSArray *)sObjectType
                           failBlock:(zkFailWithExceptionBlock)failBlock
                       completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeSearchLayoutsEnv:sObjectType];
	[self startRequest:payload name:@"describeSearchLayouts" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeSearchLayoutsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe a list of entity names that reflects the current user's searchable entities */
-(void) performDescribeSearchableEntities:(BOOL)includeOnlyEntitiesWithTabs
                                failBlock:(zkFailWithExceptionBlock)failBlock
                            completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeSearchableEntitiesEnv:includeOnlyEntitiesWithTabs];
	[self startRequest:payload name:@"describeSearchableEntities" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeSearchableEntitiesResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe a list of objects representing the order and scope of objects on a users search result page */
-(void) performDescribeSearchScopeOrder:(BOOL)includeRealTimeEntities
                              failBlock:(zkFailWithExceptionBlock)failBlock
                          completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeSearchScopeOrderEnv:includeRealTimeEntities];
	[self startRequest:payload name:@"describeSearchScopeOrder" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeSearchScopeOrderResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the compact layouts of the given sObject */
-(void) performDescribeCompactLayouts:(NSString *)sObjectType recordTypeIds:(NSArray *)recordTypeIds
                            failBlock:(zkFailWithExceptionBlock)failBlock
                        completeBlock:(zkCompleteDescribeCompactLayoutsResultBlock)completeBlock {

	NSString *payload = [self makeDescribeCompactLayoutsEnv:sObjectType recordTypeIds:recordTypeIds];
	[self startRequest:payload name:@"describeCompactLayouts" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeCompactLayoutsResult *result = [self makeDescribeCompactLayoutsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the Path Assistants for the given sObject and optionally RecordTypes */
-(void) performDescribePathAssistants:(NSString *)sObjectType picklistValue:(NSString *)picklistValue recordTypeIds:(NSArray *)recordTypeIds
                            failBlock:(zkFailWithExceptionBlock)failBlock
                        completeBlock:(zkCompleteDescribePathAssistantsResultBlock)completeBlock {

	NSString *payload = [self makeDescribePathAssistantsEnv:sObjectType picklistValue:picklistValue recordTypeIds:recordTypeIds];
	[self startRequest:payload name:@"describePathAssistants" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribePathAssistantsResult *result = [self makeDescribePathAssistantsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the approval layouts of the given sObject */
-(void) performDescribeApprovalLayout:(NSString *)sObjectType approvalProcessNames:(NSArray *)approvalProcessNames
                            failBlock:(zkFailWithExceptionBlock)failBlock
                        completeBlock:(zkCompleteDescribeApprovalLayoutResultBlock)completeBlock {

	NSString *payload = [self makeDescribeApprovalLayoutEnv:sObjectType approvalProcessNames:approvalProcessNames];
	[self startRequest:payload name:@"describeApprovalLayout" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeApprovalLayoutResult *result = [self makeDescribeApprovalLayoutResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the ListViews as SOQL metadata for the generation of SOQL. */
-(void) performDescribeSoqlListViews:(ZKDescribeSoqlListViewsRequest *)request
                           failBlock:(zkFailWithExceptionBlock)failBlock
                       completeBlock:(zkCompleteDescribeSoqlListViewResultBlock)completeBlock {

	NSString *payload = [self makeDescribeSoqlListViewsEnv:request];
	[self startRequest:payload name:@"describeSoqlListViews" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeSoqlListViewResult *result = [self makeDescribeSoqlListViewsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Execute the specified list view and return the presentation-ready results. */
-(void) performExecuteListView:(ZKExecuteListViewRequest *)request
                     failBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteExecuteListViewResultBlock)completeBlock {

	NSString *payload = [self makeExecuteListViewEnv:request];
	[self startRequest:payload name:@"executeListView" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKExecuteListViewResult *result = [self makeExecuteListViewResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the ListViews of a SObject as SOQL metadata for the generation of SOQL. */
-(void) performDescribeSObjectListViews:(NSString *)sObjectType recentsOnly:(BOOL)recentsOnly isSoqlCompatible:(NSString *)isSoqlCompatible limit:(NSInteger)limit offset:(NSInteger)offset
                              failBlock:(zkFailWithExceptionBlock)failBlock
                          completeBlock:(zkCompleteDescribeSoqlListViewResultBlock)completeBlock {

	NSString *payload = [self makeDescribeSObjectListViewsEnv:sObjectType recentsOnly:recentsOnly isSoqlCompatible:isSoqlCompatible limit:limit offset:offset];
	[self startRequest:payload name:@"describeSObjectListViews" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeSoqlListViewResult *result = [self makeDescribeSObjectListViewsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the tabs that appear on a users page */
-(void) performDescribeTabsWithFailBlock:(zkFailWithExceptionBlock)failBlock
              completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeTabsEnv];
	[self startRequest:payload name:@"describeTabs" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeTabsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe all tabs available to a user */
-(void) performDescribeAllTabsWithFailBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeAllTabsEnv];
	[self startRequest:payload name:@"describeAllTabs" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeAllTabsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the primary compact layouts for the sObjects requested */
-(void) performDescribePrimaryCompactLayouts:(NSArray *)sObjectTypes
                                   failBlock:(zkFailWithExceptionBlock)failBlock
                               completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribePrimaryCompactLayoutsEnv:sObjectTypes];
	[self startRequest:payload name:@"describePrimaryCompactLayouts" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribePrimaryCompactLayoutsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Create a set of new sObjects */
-(void) performCreate:(NSArray *)sObjects
            failBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeCreateEnv:sObjects];
	[self startRequest:payload name:@"create" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeCreateResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Update a set of sObjects */
-(void) performUpdate:(NSArray *)sObjects
            failBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeUpdateEnv:sObjects];
	[self startRequest:payload name:@"update" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeUpdateResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Update or insert a set of sObjects based on object id */
-(void) performUpsert:(NSString *)externalIDFieldName sObjects:(NSArray *)sObjects
            failBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeUpsertEnv:externalIDFieldName sObjects:sObjects];
	[self startRequest:payload name:@"upsert" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeUpsertResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Merge and update a set of sObjects based on object id */
-(void) performMerge:(NSArray *)request
           failBlock:(zkFailWithExceptionBlock)failBlock
       completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeMergeEnv:request];
	[self startRequest:payload name:@"merge" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeMergeResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Delete a set of sObjects */
-(void) performDelete:(NSArray *)ids
            failBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDeleteEnv:ids];
	[self startRequest:payload name:@"delete" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDeleteResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Undelete a set of sObjects */
-(void) performUndelete:(NSArray *)ids
              failBlock:(zkFailWithExceptionBlock)failBlock
          completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeUndeleteEnv:ids];
	[self startRequest:payload name:@"undelete" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeUndeleteResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Empty a set of sObjects from the recycle bin */
-(void) performEmptyRecycleBin:(NSArray *)ids
                     failBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeEmptyRecycleBinEnv:ids];
	[self startRequest:payload name:@"emptyRecycleBin" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeEmptyRecycleBinResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Get a set of sObjects */
-(void) performRetrieve:(NSString *)fieldList sObjectType:(NSString *)sObjectType ids:(NSArray *)ids
              failBlock:(zkFailWithExceptionBlock)failBlock
          completeBlock:(zkCompleteDictionaryBlock)completeBlock {

	NSString *payload = [self makeRetrieveEnv:fieldList sObjectType:sObjectType ids:ids];
	[self startRequest:payload name:@"retrieve" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSDictionary *result = [self makeRetrieveResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Submit an entity to a workflow process or process a workitem */
-(void) performProcess:(NSArray *)actions
             failBlock:(zkFailWithExceptionBlock)failBlock
         completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeProcessEnv:actions];
	[self startRequest:payload name:@"process" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeProcessResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** convert a set of leads */
-(void) performConvertLead:(NSArray *)leadConverts
                 failBlock:(zkFailWithExceptionBlock)failBlock
             completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeConvertLeadEnv:leadConverts];
	[self startRequest:payload name:@"convertLead" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeConvertLeadResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Logout the current user, invalidating the current session. */
-(void) performLogoutWithFailBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteVoidBlock)completeBlock {

	NSString *payload = [self makeLogoutEnv];
	[self startRequest:payload name:@"logout" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock();
			});
		}
	}];
}

/** Logs out and invalidates session ids */
-(void) performInvalidateSessions:(NSArray *)sessionIds
                        failBlock:(zkFailWithExceptionBlock)failBlock
                    completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeInvalidateSessionsEnv:sessionIds];
	[self startRequest:payload name:@"invalidateSessions" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeInvalidateSessionsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Get the IDs for deleted sObjects */
-(void) performGetDeleted:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate
                failBlock:(zkFailWithExceptionBlock)failBlock
            completeBlock:(zkCompleteGetDeletedResultBlock)completeBlock {

	NSString *payload = [self makeGetDeletedEnv:sObjectType startDate:startDate endDate:endDate];
	[self startRequest:payload name:@"getDeleted" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKGetDeletedResult *result = [self makeGetDeletedResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Get the IDs for updated sObjects */
-(void) performGetUpdated:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate
                failBlock:(zkFailWithExceptionBlock)failBlock
            completeBlock:(zkCompleteGetUpdatedResultBlock)completeBlock {

	NSString *payload = [self makeGetUpdatedEnv:sObjectType startDate:startDate endDate:endDate];
	[self startRequest:payload name:@"getUpdated" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKGetUpdatedResult *result = [self makeGetUpdatedResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Create a Query Cursor */
-(void) performQuery:(NSString *)queryString
           failBlock:(zkFailWithExceptionBlock)failBlock
       completeBlock:(zkCompleteQueryResultBlock)completeBlock {

	NSString *payload = [self makeQueryEnv:queryString];
	[self startRequest:payload name:@"query" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKQueryResult *result = [self makeQueryResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Create a Query Cursor, including deleted sObjects */
-(void) performQueryAll:(NSString *)queryString
              failBlock:(zkFailWithExceptionBlock)failBlock
          completeBlock:(zkCompleteQueryResultBlock)completeBlock {

	NSString *payload = [self makeQueryAllEnv:queryString];
	[self startRequest:payload name:@"queryAll" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKQueryResult *result = [self makeQueryAllResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Gets the next batch of sObjects from a query */
-(void) performQueryMore:(NSString *)queryLocator
               failBlock:(zkFailWithExceptionBlock)failBlock
           completeBlock:(zkCompleteQueryResultBlock)completeBlock {

	NSString *payload = [self makeQueryMoreEnv:queryLocator];
	[self startRequest:payload name:@"queryMore" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKQueryResult *result = [self makeQueryMoreResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Search for sObjects */
-(void) performSearch:(NSString *)searchString
            failBlock:(zkFailWithExceptionBlock)failBlock
        completeBlock:(zkCompleteSearchResultBlock)completeBlock {

	NSString *payload = [self makeSearchEnv:searchString];
	[self startRequest:payload name:@"search" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKSearchResult *result = [self makeSearchResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Gets server timestamp */
-(void) performGetServerTimestampWithFailBlock:(zkFailWithExceptionBlock)failBlock
                    completeBlock:(zkCompleteGetServerTimestampResultBlock)completeBlock {

	NSString *payload = [self makeGetServerTimestampEnv];
	[self startRequest:payload name:@"getServerTimestamp" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKGetServerTimestampResult *result = [self makeGetServerTimestampResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Set a user's password */
-(void) performSetPassword:(NSString *)userId password:(NSString *)password
                 failBlock:(zkFailWithExceptionBlock)failBlock
             completeBlock:(zkCompleteSetPasswordResultBlock)completeBlock {

	NSString *payload = [self makeSetPasswordEnv:userId password:password];
	[self startRequest:payload name:@"setPassword" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKSetPasswordResult *result = [self makeSetPasswordResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Change the current user's password */
-(void) performChangeOwnPassword:(NSString *)oldPassword newPassword:(NSString *)newPassword
                       failBlock:(zkFailWithExceptionBlock)failBlock
                   completeBlock:(zkCompleteChangeOwnPasswordResultBlock)completeBlock {

	NSString *payload = [self makeChangeOwnPasswordEnv:oldPassword newPassword:newPassword];
	[self startRequest:payload name:@"changeOwnPassword" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKChangeOwnPasswordResult *result = [self makeChangeOwnPasswordResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Reset a user's password */
-(void) performResetPassword:(NSString *)userId
                   failBlock:(zkFailWithExceptionBlock)failBlock
               completeBlock:(zkCompleteResetPasswordResultBlock)completeBlock {

	NSString *payload = [self makeResetPasswordEnv:userId];
	[self startRequest:payload name:@"resetPassword" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKResetPasswordResult *result = [self makeResetPasswordResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Returns standard information relevant to the current user */
-(void) performGetUserInfoWithFailBlock:(zkFailWithExceptionBlock)failBlock
             completeBlock:(zkCompleteUserInfoBlock)completeBlock {

	NSString *payload = [self makeGetUserInfoEnv];
	[self startRequest:payload name:@"getUserInfo" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKUserInfo *result = [self makeGetUserInfoResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Delete a set of sObjects by example. The passed SOBject is a template for the object to delete */
-(void) performDeleteByExample:(NSArray *)sObjects
                     failBlock:(zkFailWithExceptionBlock)failBlock
                 completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDeleteByExampleEnv:sObjects];
	[self startRequest:payload name:@"deleteByExample" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDeleteByExampleResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Send existing draft EmailMessage */
-(void) performSendEmailMessage:(NSArray *)ids
                      failBlock:(zkFailWithExceptionBlock)failBlock
                  completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeSendEmailMessageEnv:ids];
	[self startRequest:payload name:@"sendEmailMessage" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeSendEmailMessageResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Send outbound email */
-(void) performSendEmail:(NSArray *)messages
               failBlock:(zkFailWithExceptionBlock)failBlock
           completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeSendEmailEnv:messages];
	[self startRequest:payload name:@"sendEmail" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeSendEmailResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Perform a template merge on one or more blocks of text. */
-(void) performRenderEmailTemplate:(NSArray *)renderRequests
                         failBlock:(zkFailWithExceptionBlock)failBlock
                     completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeRenderEmailTemplateEnv:renderRequests];
	[self startRequest:payload name:@"renderEmailTemplate" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeRenderEmailTemplateResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Perform a template merge using an email template stored in the database. */
-(void) performRenderStoredEmailTemplate:(ZKRenderStoredEmailTemplateRequest *)request
                               failBlock:(zkFailWithExceptionBlock)failBlock
                           completeBlock:(zkCompleteRenderStoredEmailTemplateResultBlock)completeBlock {

	NSString *payload = [self makeRenderStoredEmailTemplateEnv:request];
	[self startRequest:payload name:@"renderStoredEmailTemplate" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKRenderStoredEmailTemplateResult *result = [self makeRenderStoredEmailTemplateResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Perform a series of predefined actions such as quick create or log a task */
-(void) performPerformQuickActions:(NSArray *)quickActions
                         failBlock:(zkFailWithExceptionBlock)failBlock
                     completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makePerformQuickActionsEnv:quickActions];
	[self startRequest:payload name:@"performQuickActions" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makePerformQuickActionsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the details of a series of quick actions */
-(void) performDescribeQuickActions:(NSArray *)quickActions
                          failBlock:(zkFailWithExceptionBlock)failBlock
                      completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeQuickActionsEnv:quickActions];
	[self startRequest:payload name:@"describeQuickActions" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeQuickActionsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the details of a series of quick actions in context of requested recordType id for Update actions */
-(void) performDescribeQuickActionsForRecordType:(NSArray *)quickActions recordTypeId:(NSString *)recordTypeId
                                       failBlock:(zkFailWithExceptionBlock)failBlock
                                   completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeQuickActionsForRecordTypeEnv:quickActions recordTypeId:recordTypeId];
	[self startRequest:payload name:@"describeQuickActionsForRecordType" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeQuickActionsForRecordTypeResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe the details of a series of quick actions available for the given contextType */
-(void) performDescribeAvailableQuickActions:(NSString *)contextType
                                   failBlock:(zkFailWithExceptionBlock)failBlock
                               completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeAvailableQuickActionsEnv:contextType];
	[self startRequest:payload name:@"describeAvailableQuickActions" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeAvailableQuickActionsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Retrieve the template sobjects, if appropriate, for the given quick action names in a given context */
-(void) performRetrieveQuickActionTemplates:(NSArray *)quickActionNames contextId:(NSString *)contextId
                                  failBlock:(zkFailWithExceptionBlock)failBlock
                              completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeRetrieveQuickActionTemplatesEnv:quickActionNames contextId:contextId];
	[self startRequest:payload name:@"retrieveQuickActionTemplates" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeRetrieveQuickActionTemplatesResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Retrieve the template sobjects, if appropriate, for the given quick action names in a given contexts when used a mass quick action */
-(void) performRetrieveMassQuickActionTemplates:(NSString *)quickActionName contextIds:(NSArray *)contextIds
                                      failBlock:(zkFailWithExceptionBlock)failBlock
                                  completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeRetrieveMassQuickActionTemplatesEnv:quickActionName contextIds:contextIds];
	[self startRequest:payload name:@"retrieveMassQuickActionTemplates" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeRetrieveMassQuickActionTemplatesResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Describe visualforce for an org */
-(void) performDescribeVisualForce:(BOOL)includeAllDetails namespacePrefix:(NSString *)namespacePrefix
                         failBlock:(zkFailWithExceptionBlock)failBlock
                     completeBlock:(zkCompleteDescribeVisualForceResultBlock)completeBlock {

	NSString *payload = [self makeDescribeVisualForceEnv:includeAllDetails namespacePrefix:namespacePrefix];
	[self startRequest:payload name:@"describeVisualForce" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			ZKDescribeVisualForceResult *result = [self makeDescribeVisualForceResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Find duplicates for a set of sObjects */
-(void) performFindDuplicates:(NSArray *)sObjects
                    failBlock:(zkFailWithExceptionBlock)failBlock
                completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeFindDuplicatesEnv:sObjects];
	[self startRequest:payload name:@"findDuplicates" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeFindDuplicatesResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Find duplicates for a set of ids */
-(void) performFindDuplicatesByIds:(NSArray *)ids
                         failBlock:(zkFailWithExceptionBlock)failBlock
                     completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeFindDuplicatesByIdsEnv:ids];
	[self startRequest:payload name:@"findDuplicatesByIds" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeFindDuplicatesByIdsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

/** Return the renameable nouns from the server for use in presentation using the salesforce grammar engine */
-(void) performDescribeNouns:(NSArray *)nouns onlyRenamed:(BOOL)onlyRenamed includeFields:(BOOL)includeFields
                   failBlock:(zkFailWithExceptionBlock)failBlock
               completeBlock:(zkCompleteArrayBlock)completeBlock {

	NSString *payload = [self makeDescribeNounsEnv:nouns onlyRenamed:onlyRenamed includeFields:includeFields];
	[self startRequest:payload name:@"describeNouns" handler:^(zkElement *root, NSException *ex) {
		if (![self handledError:ex failBlock:failBlock]) {
			NSArray *result = [self makeDescribeNounsResult:root];
			dispatch_async(dispatch_get_main_queue(), ^{
				completeBlock(result);
			});
		}
	}];
}

@end
