// Copyright (c) 2010 Ron Hess
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce.
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKDescribeLayoutSection.h"
#import "ZKEnvelope.h"
#import "ZKDescribeLayoutRow.h"

@interface ZKDescribeLayoutSection()
@property (assign,nonatomic) BOOL       collapsed__v;
@property (assign,nonatomic) NSInteger  columns__v;
@property (strong,nonatomic) NSString  *heading__v;
@property (strong,nonatomic) NSArray   *layoutRows__v;
@property (strong,nonatomic) NSString  *layoutSectionId__v;
@property (strong,nonatomic) NSString  *parentLayoutId__v;
@property (assign,nonatomic) NSInteger  rows__v;
@property (strong,nonatomic) NSString  *tabOrder__v;
@property (assign,nonatomic) BOOL       useCollapsibleSection__v;
@property (assign,nonatomic) BOOL       useHeading__v;
@end

@implementation ZKDescribeLayoutSection


+(void)load {
    [self registerType:self xmlName:@"DescribeLayoutSection"];
}

-(BOOL)collapsed {
    if ((fields__set[0] & 0x1) == 0) {
        self.collapsed__v = [self boolean:@"collapsed"];
        fields__set[0] |= 0x1; 
    }
    return self.collapsed__v;
}
        

-(void)setCollapsed:(BOOL)v {
    self.collapsed__v = v;
    fields__set[0] |= 0x1; 
}
        

-(NSInteger)columns {
    if ((fields__set[0] & 0x2) == 0) {
        self.columns__v = [self integer:@"columns"];
        fields__set[0] |= 0x2; 
    }
    return self.columns__v;
}
        

-(void)setColumns:(NSInteger)v {
    self.columns__v = v;
    fields__set[0] |= 0x2; 
}
        

-(NSString *)heading {
    if ((fields__set[0] & 0x4) == 0) {
        self.heading__v = [self string:@"heading"];
        fields__set[0] |= 0x4; 
    }
    return self.heading__v;
}
        

-(void)setHeading:(NSString *)v {
    self.heading__v = v;
    fields__set[0] |= 0x4; 
}
        

-(NSArray *)layoutRows {
    if ((fields__set[0] & 0x8) == 0) {
        self.layoutRows__v = [self complexTypeArrayFromElements:@"layoutRows" cls:[ZKDescribeLayoutRow class]];
        fields__set[0] |= 0x8; 
    }
    return self.layoutRows__v;
}
        

-(void)setLayoutRows:(NSArray *)v {
    self.layoutRows__v = v;
    fields__set[0] |= 0x8; 
}
        

-(NSString *)layoutSectionId {
    if ((fields__set[0] & 0x10) == 0) {
        self.layoutSectionId__v = [self string:@"layoutSectionId"];
        fields__set[0] |= 0x10; 
    }
    return self.layoutSectionId__v;
}
        

-(void)setLayoutSectionId:(NSString *)v {
    self.layoutSectionId__v = v;
    fields__set[0] |= 0x10; 
}
        

-(NSString *)parentLayoutId {
    if ((fields__set[0] & 0x20) == 0) {
        self.parentLayoutId__v = [self string:@"parentLayoutId"];
        fields__set[0] |= 0x20; 
    }
    return self.parentLayoutId__v;
}
        

-(void)setParentLayoutId:(NSString *)v {
    self.parentLayoutId__v = v;
    fields__set[0] |= 0x20; 
}
        

-(NSInteger)rows {
    if ((fields__set[0] & 0x40) == 0) {
        self.rows__v = [self integer:@"rows"];
        fields__set[0] |= 0x40; 
    }
    return self.rows__v;
}
        

-(void)setRows:(NSInteger)v {
    self.rows__v = v;
    fields__set[0] |= 0x40; 
}
        

-(NSString *)tabOrder {
    if ((fields__set[0] & 0x80) == 0) {
        self.tabOrder__v = [self string:@"tabOrder"];
        fields__set[0] |= 0x80; 
    }
    return self.tabOrder__v;
}
        

-(void)setTabOrder:(NSString *)v {
    self.tabOrder__v = v;
    fields__set[0] |= 0x80; 
}
        

-(BOOL)useCollapsibleSection {
    if ((fields__set[0] & 0x100) == 0) {
        self.useCollapsibleSection__v = [self boolean:@"useCollapsibleSection"];
        fields__set[0] |= 0x100; 
    }
    return self.useCollapsibleSection__v;
}
        

-(void)setUseCollapsibleSection:(BOOL)v {
    self.useCollapsibleSection__v = v;
    fields__set[0] |= 0x100; 
}
        

-(BOOL)useHeading {
    if ((fields__set[0] & 0x200) == 0) {
        self.useHeading__v = [self boolean:@"useHeading"];
        fields__set[0] |= 0x200; 
    }
    return self.useHeading__v;
}
        

-(void)setUseHeading:(BOOL)v {
    self.useHeading__v = v;
    fields__set[0] |= 0x200; 
}
        
-(void)serializeTo:(ZKXmlWriter *)env elemName:(NSString *)elemName {
	[env startElement:elemName];
	[env addBoolElement:@"collapsed"             elemValue:self.collapsed];
	[env addIntElement:@"columns"                elemValue:self.columns];
	[env addElement:@"heading"                   elemValue:self.heading               nillable:YES optional:NO];
	[env addElementArray:@"layoutRows"           elemValue:self.layoutRows];
	[env addElement:@"layoutSectionId"           elemValue:self.layoutSectionId       nillable:YES optional:NO];
	[env addElement:@"parentLayoutId"            elemValue:self.parentLayoutId        nillable:NO  optional:NO];
	[env addIntElement:@"rows"                   elemValue:self.rows];
	[env addElement:@"tabOrder"                  elemValue:self.tabOrder              nillable:NO  optional:NO];
	[env addBoolElement:@"useCollapsibleSection" elemValue:self.useCollapsibleSection];
	[env addBoolElement:@"useHeading"            elemValue:self.useHeading];
	[env endElement:elemName];
}
@end
