// Copyright (c) 2019 Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce.
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKDescribeAnimationRule.h"
#import "ZKEnvelope.h"

@interface ZKDescribeAnimationRule()
@property (strong,nonatomic) NSString  *animationFrequency__v;
@property (assign,nonatomic) BOOL       isActive__v;
@property (strong,nonatomic) NSString  *recordTypeContext__v;
@property (strong,nonatomic) NSString  *recordTypeId__v;
@property (strong,nonatomic) NSString  *targetField__v;
@property (strong,nonatomic) NSString  *targetFieldChangeToValues__v;
@end

@implementation ZKDescribeAnimationRule


+(void)load {
    [self registerType:self xmlName:@"DescribeAnimationRule"];
}

-(NSString *)animationFrequency {
    if ((fields__set[0] & 0x1) == 0) {
        self.animationFrequency__v = [self string:@"animationFrequency"];
        fields__set[0] |= 0x1; 
    }
    return self.animationFrequency__v;
}
        

-(void)setAnimationFrequency:(NSString *)v {
    self.animationFrequency__v = v;
    fields__set[0] |= 0x1; 
}
        

-(BOOL)isActive {
    if ((fields__set[0] & 0x2) == 0) {
        self.isActive__v = [self boolean:@"isActive"];
        fields__set[0] |= 0x2; 
    }
    return self.isActive__v;
}
        

-(void)setIsActive:(BOOL)v {
    self.isActive__v = v;
    fields__set[0] |= 0x2; 
}
        

-(NSString *)recordTypeContext {
    if ((fields__set[0] & 0x4) == 0) {
        self.recordTypeContext__v = [self string:@"recordTypeContext"];
        fields__set[0] |= 0x4; 
    }
    return self.recordTypeContext__v;
}
        

-(void)setRecordTypeContext:(NSString *)v {
    self.recordTypeContext__v = v;
    fields__set[0] |= 0x4; 
}
        

-(NSString *)recordTypeId {
    if ((fields__set[0] & 0x8) == 0) {
        self.recordTypeId__v = [self string:@"recordTypeId"];
        fields__set[0] |= 0x8; 
    }
    return self.recordTypeId__v;
}
        

-(void)setRecordTypeId:(NSString *)v {
    self.recordTypeId__v = v;
    fields__set[0] |= 0x8; 
}
        

-(NSString *)targetField {
    if ((fields__set[0] & 0x10) == 0) {
        self.targetField__v = [self string:@"targetField"];
        fields__set[0] |= 0x10; 
    }
    return self.targetField__v;
}
        

-(void)setTargetField:(NSString *)v {
    self.targetField__v = v;
    fields__set[0] |= 0x10; 
}
        

-(NSString *)targetFieldChangeToValues {
    if ((fields__set[0] & 0x20) == 0) {
        self.targetFieldChangeToValues__v = [self string:@"targetFieldChangeToValues"];
        fields__set[0] |= 0x20; 
    }
    return self.targetFieldChangeToValues__v;
}
        

-(void)setTargetFieldChangeToValues:(NSString *)v {
    self.targetFieldChangeToValues__v = v;
    fields__set[0] |= 0x20; 
}
        
-(void)serializeTo:(ZKXmlWriter *)env elemName:(NSString *)elemName {
	[env startElement:elemName];
	[env addElement:@"animationFrequency"        elemValue:self.animationFrequency        nillable:NO  optional:NO];
	[env addBoolElement:@"isActive"              elemValue:self.isActive];
	[env addElement:@"recordTypeContext"         elemValue:self.recordTypeContext         nillable:NO  optional:NO];
	[env addElement:@"recordTypeId"              elemValue:self.recordTypeId              nillable:YES optional:NO];
	[env addElement:@"targetField"               elemValue:self.targetField               nillable:NO  optional:NO];
	[env addElement:@"targetFieldChangeToValues" elemValue:self.targetFieldChangeToValues nillable:NO  optional:NO];
	[env endElement:elemName];
}
@end
