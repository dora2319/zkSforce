// Copyright (c) 2019 Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce. 
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKSforceBaseClient.h"
#import "zkParser.h"
#import "ZKConstants.h"
#import "ZKPartnerEnvelope.h"
#import "ZKAuthenticationInfo.h"
#import "ZKChangeOwnPasswordResult.h"
#import "ZKDataCategoryGroupSobjectTypePair.h"
#import "ZKDeleteByExampleResult.h"
#import "ZKDeleteResult.h"
#import "ZKDescribeAppMenuResult.h"
#import "ZKDescribeApprovalLayoutResult.h"
#import "ZKDescribeAvailableQuickActionResult.h"
#import "ZKDescribeCompactLayout.h"
#import "ZKDescribeCompactLayoutsResult.h"
#import "ZKDescribeDataCategoryGroupResult.h"
#import "ZKDescribeDataCategoryGroupStructureResult.h"
#import "ZKDescribeDataCategoryMappingResult.h"
#import "ZKDescribeGlobalSObject.h"
#import "ZKDescribeGlobalTheme.h"
#import "ZKDescribeLayoutResult.h"
#import "ZKDescribeNounResult.h"
#import "ZKDescribePathAssistantsResult.h"
#import "ZKDescribeQuickActionResult.h"
#import "ZKDescribeSObject.h"
#import "ZKDescribeSearchLayoutResult.h"
#import "ZKDescribeSearchScopeOrderResult.h"
#import "ZKDescribeSearchableEntityResult.h"
#import "ZKDescribeSoftphoneLayoutResult.h"
#import "ZKDescribeSoqlListViewResult.h"
#import "ZKDescribeSoqlListViewsRequest.h"
#import "ZKDescribeTab.h"
#import "ZKDescribeTabSetResult.h"
#import "ZKDescribeThemeResult.h"
#import "ZKDescribeVisualForceResult.h"
#import "ZKEmail.h"
#import "ZKEmptyRecycleBinResult.h"
#import "ZKExecuteListViewRequest.h"
#import "ZKExecuteListViewResult.h"
#import "ZKFindDuplicatesResult.h"
#import "ZKGetDeletedResult.h"
#import "ZKGetServerTimestampResult.h"
#import "ZKGetUpdatedResult.h"
#import "ZKInvalidateSessionsResult.h"
#import "ZKKnowledgeSettings.h"
#import "ZKLeadConvert.h"
#import "ZKLeadConvertResult.h"
#import "ZKLoginResult.h"
#import "ZKMergeRequest.h"
#import "ZKMergeResult.h"
#import "ZKPerformQuickActionRequest.h"
#import "ZKPerformQuickActionResult.h"
#import "ZKProcessRequest.h"
#import "ZKProcessResult.h"
#import "zkQueryResult.h"
#import "ZKQuickActionTemplateResult.h"
#import "ZKRenderEmailTemplateRequest.h"
#import "ZKRenderEmailTemplateResult.h"
#import "ZKRenderStoredEmailTemplateRequest.h"
#import "ZKRenderStoredEmailTemplateResult.h"
#import "ZKResetPasswordResult.h"
#import "ZKSObject.h"
#import "ZKSaveResult.h"
#import "ZKSearchResult.h"
#import "ZKSendEmailResult.h"
#import "ZKSetPasswordResult.h"
#import "ZKUndeleteResult.h"
#import "ZKUpsertResult.h"
#import "ZKUserInfo.h"

@implementation ZKSforceBaseClient

-(id)copyWithZone:(nullable NSZone *)zone {
	ZKSforceBaseClient *c = [super copyWithZone:zone];
	c.authSource = self.authSource;
	c.allOrNoneHeader = self.allOrNoneHeader;
	c.allowFieldTruncationHeader = self.allowFieldTruncationHeader;
	c.assignmentRuleHeader = self.assignmentRuleHeader;
	c.callOptions = self.callOptions;
	c.debuggingHeader = self.debuggingHeader;
	c.disableFeedTrackingHeader = self.disableFeedTrackingHeader;
	c.duplicateRuleHeader = self.duplicateRuleHeader;
	c.emailHeader = self.emailHeader;
	c.localeOptions = self.localeOptions;
	c.loginScopeHeader = self.loginScopeHeader;
	c.mruHeader = self.mruHeader;
	c.ownerChangeOptions = self.ownerChangeOptions;
	c.packageVersionHeader = self.packageVersionHeader;
	c.queryOptions = self.queryOptions;
	c.sessionHeader = self.sessionHeader;
	c.streamingEnabledHeader = self.streamingEnabledHeader;
	c.userTerritoryDeleteHeader = self.userTerritoryDeleteHeader;
	return c;
}

-(NSString *)makeLoginEnv:(NSString *)username password:(NSString *)password {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"LoginScopeHeader" elemValue:self.loginScopeHeader nillable:NO  optional:YES];
	[env addElement:@"CallOptions"      elemValue:self.callOptions      nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"login"];
	[env addElement:@"username" elemValue:username nillable:NO  optional:NO];
	[env addElement:@"password" elemValue:password nillable:NO  optional:NO];
	[env endElement:@"login"];
	return env.end;
}
-(ZKLoginResult *)makeLoginResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKLoginResult class]].lastObject;
}

-(NSString *)makeDescribeSObjectEnv:(NSString *)sObjectType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSObject"];
	[env addElement:@"sObjectType" elemValue:sObjectType nillable:NO  optional:NO];
	[env endElement:@"describeSObject"];
	return env.end;
}
-(ZKDescribeSObject *)makeDescribeSObjectResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSObject class]].lastObject;
}

-(NSString *)makeDescribeSObjectsEnv:(NSArray *)sObjectType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSObjects"];
	[env addElementArray:@"sObjectType" elemValue:sObjectType];
	[env endElement:@"describeSObjects"];
	return env.end;
}
-(NSArray *)makeDescribeSObjectsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSObject class]];
}

-(NSString *)makeDescribeGlobalEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeGlobal"];
	[env endElement:@"describeGlobal"];
	return env.end;
}
-(NSArray *)makeDescribeGlobalResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeGlobalSObject class]];
}

-(NSString *)makeDescribeDataCategoryGroupsEnv:(NSArray *)sObjectType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeDataCategoryGroups"];
	[env addElementArray:@"sObjectType" elemValue:sObjectType];
	[env endElement:@"describeDataCategoryGroups"];
	return env.end;
}
-(NSArray *)makeDescribeDataCategoryGroupsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeDataCategoryGroupResult class]];
}

-(NSString *)makeDescribeDataCategoryGroupStructuresEnv:(NSArray *)pairs topCategoriesOnly:(BOOL)topCategoriesOnly {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeDataCategoryGroupStructures"];
	[env addElementArray:@"pairs"            elemValue:pairs];
	[env addBoolElement:@"topCategoriesOnly" elemValue:topCategoriesOnly];
	[env endElement:@"describeDataCategoryGroupStructures"];
	return env.end;
}
-(NSArray *)makeDescribeDataCategoryGroupStructuresResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeDataCategoryGroupStructureResult class]];
}

-(NSString *)makeDescribeDataCategoryMappingsEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeDataCategoryMappings"];
	[env endElement:@"describeDataCategoryMappings"];
	return env.end;
}
-(NSArray *)makeDescribeDataCategoryMappingsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeDataCategoryMappingResult class]];
}

-(NSString *)makeDescribeKnowledgeSettingsEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeKnowledgeSettings"];
	[env endElement:@"describeKnowledgeSettings"];
	return env.end;
}
-(ZKKnowledgeSettings *)makeDescribeKnowledgeSettingsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKKnowledgeSettings class]].lastObject;
}

-(NSString *)makeDescribeAppMenuEnv:(NSString *)appMenuType networkId:(NSString *)networkId {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeAppMenu"];
	[env addElement:@"appMenuType" elemValue:appMenuType nillable:NO  optional:NO];
	[env addElement:@"networkId"   elemValue:networkId   nillable:YES optional:NO];
	[env endElement:@"describeAppMenu"];
	return env.end;
}
-(ZKDescribeAppMenuResult *)makeDescribeAppMenuResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeAppMenuResult class]].lastObject;
}

-(NSString *)makeDescribeGlobalThemeEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeGlobalTheme"];
	[env endElement:@"describeGlobalTheme"];
	return env.end;
}
-(ZKDescribeGlobalTheme *)makeDescribeGlobalThemeResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeGlobalTheme class]].lastObject;
}

-(NSString *)makeDescribeThemeEnv:(NSArray *)sobjectType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeTheme"];
	[env addElementArray:@"sobjectType" elemValue:sobjectType];
	[env endElement:@"describeTheme"];
	return env.end;
}
-(ZKDescribeThemeResult *)makeDescribeThemeResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeThemeResult class]].lastObject;
}

-(NSString *)makeDescribeLayoutEnv:(NSString *)sObjectType layoutName:(NSString *)layoutName recordTypeIds:(NSArray *)recordTypeIds {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeLayout"];
	[env addElement:@"sObjectType"        elemValue:sObjectType   nillable:NO  optional:NO];
	[env addElement:@"layoutName"         elemValue:layoutName    nillable:YES optional:NO];
	[env addElementArray:@"recordTypeIds" elemValue:recordTypeIds];
	[env endElement:@"describeLayout"];
	return env.end;
}
-(ZKDescribeLayoutResult *)makeDescribeLayoutResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeLayoutResult class]].lastObject;
}

-(NSString *)makeDescribeSoftphoneLayoutEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSoftphoneLayout"];
	[env endElement:@"describeSoftphoneLayout"];
	return env.end;
}
-(ZKDescribeSoftphoneLayoutResult *)makeDescribeSoftphoneLayoutResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSoftphoneLayoutResult class]].lastObject;
}

-(NSString *)makeDescribeSearchLayoutsEnv:(NSArray *)sObjectType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSearchLayouts"];
	[env addElementArray:@"sObjectType" elemValue:sObjectType];
	[env endElement:@"describeSearchLayouts"];
	return env.end;
}
-(NSArray *)makeDescribeSearchLayoutsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSearchLayoutResult class]];
}

-(NSString *)makeDescribeSearchableEntitiesEnv:(BOOL)includeOnlyEntitiesWithTabs {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSearchableEntities"];
	[env addBoolElement:@"includeOnlyEntitiesWithTabs" elemValue:includeOnlyEntitiesWithTabs];
	[env endElement:@"describeSearchableEntities"];
	return env.end;
}
-(NSArray *)makeDescribeSearchableEntitiesResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSearchableEntityResult class]];
}

-(NSString *)makeDescribeSearchScopeOrderEnv:(BOOL)includeRealTimeEntities {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSearchScopeOrder"];
	[env addBoolElement:@"includeRealTimeEntities" elemValue:includeRealTimeEntities];
	[env endElement:@"describeSearchScopeOrder"];
	return env.end;
}
-(NSArray *)makeDescribeSearchScopeOrderResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSearchScopeOrderResult class]];
}

-(NSString *)makeDescribeCompactLayoutsEnv:(NSString *)sObjectType recordTypeIds:(NSArray *)recordTypeIds {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeCompactLayouts"];
	[env addElement:@"sObjectType"        elemValue:sObjectType   nillable:NO  optional:NO];
	[env addElementArray:@"recordTypeIds" elemValue:recordTypeIds];
	[env endElement:@"describeCompactLayouts"];
	return env.end;
}
-(ZKDescribeCompactLayoutsResult *)makeDescribeCompactLayoutsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeCompactLayoutsResult class]].lastObject;
}

-(NSString *)makeDescribePathAssistantsEnv:(NSString *)sObjectType picklistValue:(NSString *)picklistValue recordTypeIds:(NSArray *)recordTypeIds {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describePathAssistants"];
	[env addElement:@"sObjectType"        elemValue:sObjectType   nillable:NO  optional:NO];
	[env addElement:@"picklistValue"      elemValue:picklistValue nillable:YES optional:NO];
	[env addElementArray:@"recordTypeIds" elemValue:recordTypeIds];
	[env endElement:@"describePathAssistants"];
	return env.end;
}
-(ZKDescribePathAssistantsResult *)makeDescribePathAssistantsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribePathAssistantsResult class]].lastObject;
}

-(NSString *)makeDescribeApprovalLayoutEnv:(NSString *)sObjectType approvalProcessNames:(NSArray *)approvalProcessNames {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeApprovalLayout"];
	[env addElement:@"sObjectType"               elemValue:sObjectType          nillable:NO  optional:NO];
	[env addElementArray:@"approvalProcessNames" elemValue:approvalProcessNames];
	[env endElement:@"describeApprovalLayout"];
	return env.end;
}
-(ZKDescribeApprovalLayoutResult *)makeDescribeApprovalLayoutResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeApprovalLayoutResult class]].lastObject;
}

-(NSString *)makeDescribeSoqlListViewsEnv:(ZKDescribeSoqlListViewsRequest *)request {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSoqlListViews"];
	[env addElement:@"request" elemValue:request nillable:NO  optional:NO];
	[env endElement:@"describeSoqlListViews"];
	return env.end;
}
-(ZKDescribeSoqlListViewResult *)makeDescribeSoqlListViewsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSoqlListViewResult class]].lastObject;
}

-(NSString *)makeExecuteListViewEnv:(ZKExecuteListViewRequest *)request {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env addElement:@"MruHeader"   elemValue:self.mruHeader   nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"executeListView"];
	[env addElement:@"request" elemValue:request nillable:NO  optional:NO];
	[env endElement:@"executeListView"];
	return env.end;
}
-(ZKExecuteListViewResult *)makeExecuteListViewResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKExecuteListViewResult class]].lastObject;
}

-(NSString *)makeDescribeSObjectListViewsEnv:(NSString *)sObjectType recentsOnly:(BOOL)recentsOnly isSoqlCompatible:(NSString *)isSoqlCompatible limit:(NSInteger)limit offset:(NSInteger)offset {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeSObjectListViews"];
	[env addElement:@"sObjectType"      elemValue:sObjectType      nillable:NO  optional:NO];
	[env addBoolElement:@"recentsOnly"  elemValue:recentsOnly];
	[env addElement:@"isSoqlCompatible" elemValue:isSoqlCompatible nillable:NO  optional:NO];
	[env addIntElement:@"limit"         elemValue:limit];
	[env addIntElement:@"offset"        elemValue:offset];
	[env endElement:@"describeSObjectListViews"];
	return env.end;
}
-(ZKDescribeSoqlListViewResult *)makeDescribeSObjectListViewsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeSoqlListViewResult class]].lastObject;
}

-(NSString *)makeDescribeTabsEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeTabs"];
	[env endElement:@"describeTabs"];
	return env.end;
}
-(NSArray *)makeDescribeTabsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeTabSetResult class]];
}

-(NSString *)makeDescribeAllTabsEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeAllTabs"];
	[env endElement:@"describeAllTabs"];
	return env.end;
}
-(NSArray *)makeDescribeAllTabsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeTab class]];
}

-(NSString *)makeDescribePrimaryCompactLayoutsEnv:(NSArray *)sObjectTypes {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describePrimaryCompactLayouts"];
	[env addElementArray:@"sObjectTypes" elemValue:sObjectTypes];
	[env endElement:@"describePrimaryCompactLayouts"];
	return env.end;
}
-(NSArray *)makeDescribePrimaryCompactLayoutsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeCompactLayout class]];
}

-(NSString *)makeCreateEnv:(NSArray *)sObjects {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AssignmentRuleHeader"       elemValue:self.assignmentRuleHeader       nillable:NO  optional:YES];
	[env addElement:@"MruHeader"                  elemValue:self.mruHeader                  nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"create"];
	[env addElementArray:@"sObjects" elemValue:sObjects];
	[env endElement:@"create"];
	return env.end;
}
-(NSArray *)makeCreateResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSaveResult class]];
}

-(NSString *)makeUpdateEnv:(NSArray *)sObjects {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AssignmentRuleHeader"       elemValue:self.assignmentRuleHeader       nillable:NO  optional:YES];
	[env addElement:@"MruHeader"                  elemValue:self.mruHeader                  nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env addElement:@"OwnerChangeOptions"         elemValue:self.ownerChangeOptions         nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"update"];
	[env addElementArray:@"sObjects" elemValue:sObjects];
	[env endElement:@"update"];
	return env.end;
}
-(NSArray *)makeUpdateResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSaveResult class]];
}

-(NSString *)makeUpsertEnv:(NSString *)externalIDFieldName sObjects:(NSArray *)sObjects {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AssignmentRuleHeader"       elemValue:self.assignmentRuleHeader       nillable:NO  optional:YES];
	[env addElement:@"MruHeader"                  elemValue:self.mruHeader                  nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env addElement:@"OwnerChangeOptions"         elemValue:self.ownerChangeOptions         nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"upsert"];
	[env addElement:@"externalIDFieldName" elemValue:externalIDFieldName nillable:NO  optional:NO];
	[env addElementArray:@"sObjects"       elemValue:sObjects];
	[env endElement:@"upsert"];
	return env.end;
}
-(NSArray *)makeUpsertResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKUpsertResult class]];
}

-(NSString *)makeMergeEnv:(NSArray *)request {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AssignmentRuleHeader"       elemValue:self.assignmentRuleHeader       nillable:NO  optional:YES];
	[env addElement:@"MruHeader"                  elemValue:self.mruHeader                  nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"merge"];
	[env addElementArray:@"request" elemValue:request];
	[env endElement:@"merge"];
	return env.end;
}
-(NSArray *)makeMergeResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKMergeResult class]];
}

-(NSString *)makeDeleteEnv:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"UserTerritoryDeleteHeader"  elemValue:self.userTerritoryDeleteHeader  nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"delete"];
	[env addElementArray:@"ids" elemValue:ids];
	[env endElement:@"delete"];
	return env.end;
}
-(NSArray *)makeDeleteResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDeleteResult class]];
}

-(NSString *)makeUndeleteEnv:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"undelete"];
	[env addElementArray:@"ids" elemValue:ids];
	[env endElement:@"undelete"];
	return env.end;
}
-(NSArray *)makeUndeleteResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKUndeleteResult class]];
}

-(NSString *)makeEmptyRecycleBinEnv:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"emptyRecycleBin"];
	[env addElementArray:@"ids" elemValue:ids];
	[env endElement:@"emptyRecycleBin"];
	return env.end;
}
-(NSArray *)makeEmptyRecycleBinResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKEmptyRecycleBinResult class]];
}

-(NSString *)makeRetrieveEnv:(NSString *)fieldList sObjectType:(NSString *)sObjectType ids:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"QueryOptions"         elemValue:self.queryOptions         nillable:NO  optional:YES];
	[env addElement:@"MruHeader"            elemValue:self.mruHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"retrieve"];
	[env addElement:@"fieldList"   elemValue:fieldList   nillable:NO  optional:NO];
	[env addElement:@"sObjectType" elemValue:sObjectType nillable:NO  optional:NO];
	[env addElementArray:@"ids"    elemValue:ids];
	[env endElement:@"retrieve"];
	return env.end;
}
-(NSDictionary *)makeRetrieveResult:(zkElement *)root {
	NSAssert(NO, @"subclass is expected to override this method");
	return nil;
}

-(NSString *)makeProcessEnv:(NSArray *)actions {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"process"];
	[env addElementArray:@"actions" elemValue:actions];
	[env endElement:@"process"];
	return env.end;
}
-(NSArray *)makeProcessResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKProcessResult class]];
}

-(NSString *)makeConvertLeadEnv:(NSArray *)leadConverts {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"convertLead"];
	[env addElementArray:@"leadConverts" elemValue:leadConverts];
	[env endElement:@"convertLead"];
	return env.end;
}
-(NSArray *)makeConvertLeadResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKLeadConvertResult class]];
}

-(NSString *)makeLogoutEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"logout"];
	[env endElement:@"logout"];
	return env.end;
}
-(void)makeLogoutResult:(zkElement *)root {
}

-(NSString *)makeInvalidateSessionsEnv:(NSArray *)sessionIds {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"invalidateSessions"];
	[env addElementArray:@"sessionIds" elemValue:sessionIds];
	[env endElement:@"invalidateSessions"];
	return env.end;
}
-(NSArray *)makeInvalidateSessionsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKInvalidateSessionsResult class]];
}

-(NSString *)makeGetDeletedEnv:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"getDeleted"];
	[env addElement:@"sObjectType" elemValue:sObjectType nillable:NO  optional:NO];
	[env addElement:@"startDate"   elemValue:startDate   nillable:NO  optional:NO];
	[env addElement:@"endDate"     elemValue:endDate     nillable:NO  optional:NO];
	[env endElement:@"getDeleted"];
	return env.end;
}
-(ZKGetDeletedResult *)makeGetDeletedResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKGetDeletedResult class]].lastObject;
}

-(NSString *)makeGetUpdatedEnv:(NSString *)sObjectType startDate:(NSDate *)startDate endDate:(NSDate *)endDate {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"getUpdated"];
	[env addElement:@"sObjectType" elemValue:sObjectType nillable:NO  optional:NO];
	[env addElement:@"startDate"   elemValue:startDate   nillable:NO  optional:NO];
	[env addElement:@"endDate"     elemValue:endDate     nillable:NO  optional:NO];
	[env endElement:@"getUpdated"];
	return env.end;
}
-(ZKGetUpdatedResult *)makeGetUpdatedResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKGetUpdatedResult class]].lastObject;
}

-(NSString *)makeQueryEnv:(NSString *)queryString {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"QueryOptions"         elemValue:self.queryOptions         nillable:NO  optional:YES];
	[env addElement:@"MruHeader"            elemValue:self.mruHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"query"];
	[env addElement:@"queryString" elemValue:queryString nillable:NO  optional:NO];
	[env endElement:@"query"];
	return env.end;
}
-(ZKQueryResult *)makeQueryResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser queryResult:@"result"];
}

-(NSString *)makeQueryAllEnv:(NSString *)queryString {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"  elemValue:self.callOptions  nillable:NO  optional:YES];
	[env addElement:@"QueryOptions" elemValue:self.queryOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"queryAll"];
	[env addElement:@"queryString" elemValue:queryString nillable:NO  optional:NO];
	[env endElement:@"queryAll"];
	return env.end;
}
-(ZKQueryResult *)makeQueryAllResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser queryResult:@"result"];
}

-(NSString *)makeQueryMoreEnv:(NSString *)queryLocator {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"  elemValue:self.callOptions  nillable:NO  optional:YES];
	[env addElement:@"QueryOptions" elemValue:self.queryOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"queryMore"];
	[env addElement:@"queryLocator" elemValue:queryLocator nillable:NO  optional:NO];
	[env endElement:@"queryMore"];
	return env.end;
}
-(ZKQueryResult *)makeQueryMoreResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser queryResult:@"result"];
}

-(NSString *)makeSearchEnv:(NSString *)searchString {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"search"];
	[env addElement:@"searchString" elemValue:searchString nillable:NO  optional:NO];
	[env endElement:@"search"];
	return env.end;
}
-(ZKSearchResult *)makeSearchResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSearchResult class]].lastObject;
}

-(NSString *)makeGetServerTimestampEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"getServerTimestamp"];
	[env endElement:@"getServerTimestamp"];
	return env.end;
}
-(ZKGetServerTimestampResult *)makeGetServerTimestampResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKGetServerTimestampResult class]].lastObject;
}

-(NSString *)makeSetPasswordEnv:(NSString *)userId password:(NSString *)password {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"setPassword"];
	[env addElement:@"userId"   elemValue:userId   nillable:NO  optional:NO];
	[env addElement:@"password" elemValue:password nillable:NO  optional:NO];
	[env endElement:@"setPassword"];
	return env.end;
}
-(ZKSetPasswordResult *)makeSetPasswordResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSetPasswordResult class]].lastObject;
}

-(NSString *)makeChangeOwnPasswordEnv:(NSString *)oldPassword newPassword:(NSString *)newPassword {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"changeOwnPassword"];
	[env addElement:@"oldPassword" elemValue:oldPassword nillable:NO  optional:NO];
	[env addElement:@"newPassword" elemValue:newPassword nillable:NO  optional:NO];
	[env endElement:@"changeOwnPassword"];
	return env.end;
}
-(ZKChangeOwnPasswordResult *)makeChangeOwnPasswordResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKChangeOwnPasswordResult class]].lastObject;
}

-(NSString *)makeResetPasswordEnv:(NSString *)userId {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env addElement:@"EmailHeader" elemValue:self.emailHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"resetPassword"];
	[env addElement:@"userId" elemValue:userId nillable:NO  optional:NO];
	[env endElement:@"resetPassword"];
	return env.end;
}
-(ZKResetPasswordResult *)makeResetPasswordResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKResetPasswordResult class]].lastObject;
}

-(NSString *)makeGetUserInfoEnv {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"getUserInfo"];
	[env endElement:@"getUserInfo"];
	return env.end;
}
-(ZKUserInfo *)makeGetUserInfoResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKUserInfo class]].lastObject;
}

-(NSString *)makeDeleteByExampleEnv:(NSArray *)sObjects {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"UserTerritoryDeleteHeader"  elemValue:self.userTerritoryDeleteHeader  nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"deleteByExample"];
	[env addElementArray:@"sObjects" elemValue:sObjects];
	[env endElement:@"deleteByExample"];
	return env.end;
}
-(NSArray *)makeDeleteByExampleResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDeleteByExampleResult class]];
}

-(NSString *)makeSendEmailMessageEnv:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"sendEmailMessage"];
	[env addElementArray:@"ids" elemValue:ids];
	[env endElement:@"sendEmailMessage"];
	return env.end;
}
-(NSArray *)makeSendEmailMessageResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSendEmailResult class]];
}

-(NSString *)makeSendEmailEnv:(NSArray *)messages {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"sendEmail"];
	[env addElementArray:@"messages" elemValue:messages];
	[env endElement:@"sendEmail"];
	return env.end;
}
-(NSArray *)makeSendEmailResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKSendEmailResult class]];
}

-(NSString *)makeRenderEmailTemplateEnv:(NSArray *)renderRequests {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"renderEmailTemplate"];
	[env addElementArray:@"renderRequests" elemValue:renderRequests];
	[env endElement:@"renderEmailTemplate"];
	return env.end;
}
-(NSArray *)makeRenderEmailTemplateResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKRenderEmailTemplateResult class]];
}

-(NSString *)makeRenderStoredEmailTemplateEnv:(ZKRenderStoredEmailTemplateRequest *)request {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions" elemValue:self.callOptions nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"renderStoredEmailTemplate"];
	[env addElement:@"request" elemValue:request nillable:NO  optional:NO];
	[env endElement:@"renderStoredEmailTemplate"];
	return env.end;
}
-(ZKRenderStoredEmailTemplateResult *)makeRenderStoredEmailTemplateResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKRenderStoredEmailTemplateResult class]].lastObject;
}

-(NSString *)makePerformQuickActionsEnv:(NSArray *)quickActions {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"                elemValue:self.callOptions                nillable:NO  optional:YES];
	[env addElement:@"AssignmentRuleHeader"       elemValue:self.assignmentRuleHeader       nillable:NO  optional:YES];
	[env addElement:@"MruHeader"                  elemValue:self.mruHeader                  nillable:NO  optional:YES];
	[env addElement:@"AllowFieldTruncationHeader" elemValue:self.allowFieldTruncationHeader nillable:NO  optional:YES];
	[env addElement:@"DisableFeedTrackingHeader"  elemValue:self.disableFeedTrackingHeader  nillable:NO  optional:YES];
	[env addElement:@"StreamingEnabledHeader"     elemValue:self.streamingEnabledHeader     nillable:NO  optional:YES];
	[env addElement:@"AllOrNoneHeader"            elemValue:self.allOrNoneHeader            nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"        elemValue:self.duplicateRuleHeader        nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"              elemValue:self.localeOptions              nillable:NO  optional:YES];
	[env addElement:@"DebuggingHeader"            elemValue:self.debuggingHeader            nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader"       elemValue:self.packageVersionHeader       nillable:NO  optional:YES];
	[env addElement:@"EmailHeader"                elemValue:self.emailHeader                nillable:NO  optional:YES];
	[env addElement:@"OwnerChangeOptions"         elemValue:self.ownerChangeOptions         nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"performQuickActions"];
	[env addElementArray:@"quickActions" elemValue:quickActions];
	[env endElement:@"performQuickActions"];
	return env.end;
}
-(NSArray *)makePerformQuickActionsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKPerformQuickActionResult class]];
}

-(NSString *)makeDescribeQuickActionsEnv:(NSArray *)quickActions {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeQuickActions"];
	[env addElementArray:@"quickActions" elemValue:quickActions];
	[env endElement:@"describeQuickActions"];
	return env.end;
}
-(NSArray *)makeDescribeQuickActionsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeQuickActionResult class]];
}

-(NSString *)makeDescribeQuickActionsForRecordTypeEnv:(NSArray *)quickActions recordTypeId:(NSString *)recordTypeId {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeQuickActionsForRecordType"];
	[env addElementArray:@"quickActions" elemValue:quickActions];
	[env addElement:@"recordTypeId"      elemValue:recordTypeId nillable:NO  optional:NO];
	[env endElement:@"describeQuickActionsForRecordType"];
	return env.end;
}
-(NSArray *)makeDescribeQuickActionsForRecordTypeResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeQuickActionResult class]];
}

-(NSString *)makeDescribeAvailableQuickActionsEnv:(NSString *)contextType {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeAvailableQuickActions"];
	[env addElement:@"contextType" elemValue:contextType nillable:YES optional:NO];
	[env endElement:@"describeAvailableQuickActions"];
	return env.end;
}
-(NSArray *)makeDescribeAvailableQuickActionsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeAvailableQuickActionResult class]];
}

-(NSString *)makeRetrieveQuickActionTemplatesEnv:(NSArray *)quickActionNames contextId:(NSString *)contextId {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"retrieveQuickActionTemplates"];
	[env addElementArray:@"quickActionNames" elemValue:quickActionNames];
	[env addElement:@"contextId"             elemValue:contextId        nillable:YES optional:NO];
	[env endElement:@"retrieveQuickActionTemplates"];
	return env.end;
}
-(NSArray *)makeRetrieveQuickActionTemplatesResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKQuickActionTemplateResult class]];
}

-(NSString *)makeRetrieveMassQuickActionTemplatesEnv:(NSString *)quickActionName contextIds:(NSArray *)contextIds {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"retrieveMassQuickActionTemplates"];
	[env addElement:@"quickActionName" elemValue:quickActionName nillable:NO  optional:NO];
	[env addElementArray:@"contextIds" elemValue:contextIds];
	[env endElement:@"retrieveMassQuickActionTemplates"];
	return env.end;
}
-(NSArray *)makeRetrieveMassQuickActionTemplatesResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKQuickActionTemplateResult class]];
}

-(NSString *)makeDescribeVisualForceEnv:(BOOL)includeAllDetails namespacePrefix:(NSString *)namespacePrefix {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeVisualForce"];
	[env addBoolElement:@"includeAllDetails" elemValue:includeAllDetails];
	[env addElement:@"namespacePrefix"       elemValue:namespacePrefix   nillable:YES optional:NO];
	[env endElement:@"describeVisualForce"];
	return env.end;
}
-(ZKDescribeVisualForceResult *)makeDescribeVisualForceResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeVisualForceResult class]].lastObject;
}

-(NSString *)makeFindDuplicatesEnv:(NSArray *)sObjects {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"  elemValue:self.duplicateRuleHeader  nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"findDuplicates"];
	[env addElementArray:@"sObjects" elemValue:sObjects];
	[env endElement:@"findDuplicates"];
	return env.end;
}
-(NSArray *)makeFindDuplicatesResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKFindDuplicatesResult class]];
}

-(NSString *)makeFindDuplicatesByIdsEnv:(NSArray *)ids {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"DuplicateRuleHeader"  elemValue:self.duplicateRuleHeader  nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"findDuplicatesByIds"];
	[env addElementArray:@"ids" elemValue:ids];
	[env endElement:@"findDuplicatesByIds"];
	return env.end;
}
-(NSArray *)makeFindDuplicatesByIdsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKFindDuplicatesResult class]];
}

-(NSString *)makeDescribeNounsEnv:(NSArray *)nouns onlyRenamed:(BOOL)onlyRenamed includeFields:(BOOL)includeFields {
	ZKEnvelope *env = [[ZKPartnerEnvelope alloc] initWithSessionHeader:self.authSource.sessionId];
	[env addElement:@"CallOptions"          elemValue:self.callOptions          nillable:NO  optional:YES];
	[env addElement:@"PackageVersionHeader" elemValue:self.packageVersionHeader nillable:NO  optional:YES];
	[env addElement:@"LocaleOptions"        elemValue:self.localeOptions        nillable:NO  optional:YES];
	[env moveToBody];
	[env startElement:@"describeNouns"];
	[env addElementArray:@"nouns"        elemValue:nouns];
	[env addBoolElement:@"onlyRenamed"   elemValue:onlyRenamed];
	[env addBoolElement:@"includeFields" elemValue:includeFields];
	[env endElement:@"describeNouns"];
	return env.end;
}
-(NSArray *)makeDescribeNounsResult:(zkElement *)root {
	zkElement *body = [root childElement:@"Body" ns:NS_SOAP_ENV];
	ZKXmlDeserializer *deser = [[ZKXmlDeserializer alloc] initWithXmlElement:body.childElements[0]];
	return [deser complexTypeArrayFromElements:@"result" cls:[ZKDescribeNounResult class]];
}

@end
