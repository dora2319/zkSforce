// Copyright (c) 2013 Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce.
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKLeadConvert.h"
#import "ZKEnvelope.h"
#import "ZKSObject.h"

@interface ZKLeadConvert()
@property (strong,nonatomic) NSString   *accountId__v;
@property (strong,nonatomic) ZKSObject  *accountRecord__v;
@property (assign,nonatomic) BOOL        bypassAccountDedupeCheck__v;
@property (assign,nonatomic) BOOL        bypassContactDedupeCheck__v;
@property (strong,nonatomic) NSString   *contactId__v;
@property (strong,nonatomic) ZKSObject  *contactRecord__v;
@property (strong,nonatomic) NSString   *convertedStatus__v;
@property (assign,nonatomic) BOOL        doNotCreateOpportunity__v;
@property (strong,nonatomic) NSString   *leadId__v;
@property (strong,nonatomic) NSString   *opportunityId__v;
@property (strong,nonatomic) NSString   *opportunityName__v;
@property (strong,nonatomic) ZKSObject  *opportunityRecord__v;
@property (assign,nonatomic) BOOL        overwriteLeadSource__v;
@property (strong,nonatomic) NSString   *ownerId__v;
@property (strong,nonatomic) NSString   *relatedPersonAccountId__v;
@property (strong,nonatomic) ZKSObject  *relatedPersonAccountRecord__v;
@property (assign,nonatomic) BOOL        sendNotificationEmail__v;
@end

@implementation ZKLeadConvert


+(void)load {
    [self registerType:self xmlName:@"LeadConvert"];
}

+(ZKComplexTypeInfo *)wsdlSchema {
   static ZKComplexTypeInfo *wsdlSchema;
   static dispatch_once_t onceToken;
   dispatch_once(&onceToken, ^{
       wsdlSchema = [[ZKComplexTypeInfo alloc] initWithType:@"LeadConvert" parent:nil
                    fields:@[
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"accountId" propertyName:@"accountId" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"accountRecord" propertyName:@"accountRecord" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"bypassAccountDedupeCheck" propertyName:@"bypassAccountDedupeCheck" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"bypassContactDedupeCheck" propertyName:@"bypassContactDedupeCheck" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"contactId" propertyName:@"contactId" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"contactRecord" propertyName:@"contactRecord" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"convertedStatus" propertyName:@"convertedStatus" optional:NO nillable:NO],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"doNotCreateOpportunity" propertyName:@"doNotCreateOpportunity" optional:NO nillable:NO],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"leadId" propertyName:@"leadId" optional:NO nillable:NO],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"opportunityId" propertyName:@"opportunityId" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"opportunityName" propertyName:@"opportunityName" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"opportunityRecord" propertyName:@"opportunityRecord" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"overwriteLeadSource" propertyName:@"overwriteLeadSource" optional:NO nillable:NO],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"ownerId" propertyName:@"ownerId" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"relatedPersonAccountId" propertyName:@"relatedPersonAccountId" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"relatedPersonAccountRecord" propertyName:@"relatedPersonAccountRecord" optional:NO nillable:YES],
                        [[ZKComplexTypeFieldInfo alloc] initWithElementName:@"sendNotificationEmail" propertyName:@"sendNotificationEmail" optional:NO nillable:NO],

                    ]];
   });
   return wsdlSchema;
}
    

-(NSString *)accountId {
    if ((fields__set[0] & 0x1) == 0) {
        self.accountId__v = [self string:@"accountId"];
        fields__set[0] |= 0x1; 
    }
    return self.accountId__v;
}
        

-(void)setAccountId:(NSString *)v {
    self.accountId__v = v;
    fields__set[0] |= 0x1; 
}
        

-(ZKSObject *)accountRecord {
    if ((fields__set[0] & 0x2) == 0) {
        self.accountRecord__v = [self sObject:@"accountRecord"];
        fields__set[0] |= 0x2; 
    }
    return self.accountRecord__v;
}
        

-(void)setAccountRecord:(ZKSObject *)v {
    self.accountRecord__v = v;
    fields__set[0] |= 0x2; 
}
        

-(BOOL)bypassAccountDedupeCheck {
    if ((fields__set[0] & 0x4) == 0) {
        self.bypassAccountDedupeCheck__v = [self boolean:@"bypassAccountDedupeCheck"];
        fields__set[0] |= 0x4; 
    }
    return self.bypassAccountDedupeCheck__v;
}
        

-(void)setBypassAccountDedupeCheck:(BOOL)v {
    self.bypassAccountDedupeCheck__v = v;
    fields__set[0] |= 0x4; 
}
        

-(BOOL)bypassContactDedupeCheck {
    if ((fields__set[0] & 0x8) == 0) {
        self.bypassContactDedupeCheck__v = [self boolean:@"bypassContactDedupeCheck"];
        fields__set[0] |= 0x8; 
    }
    return self.bypassContactDedupeCheck__v;
}
        

-(void)setBypassContactDedupeCheck:(BOOL)v {
    self.bypassContactDedupeCheck__v = v;
    fields__set[0] |= 0x8; 
}
        

-(NSString *)contactId {
    if ((fields__set[0] & 0x10) == 0) {
        self.contactId__v = [self string:@"contactId"];
        fields__set[0] |= 0x10; 
    }
    return self.contactId__v;
}
        

-(void)setContactId:(NSString *)v {
    self.contactId__v = v;
    fields__set[0] |= 0x10; 
}
        

-(ZKSObject *)contactRecord {
    if ((fields__set[0] & 0x20) == 0) {
        self.contactRecord__v = [self sObject:@"contactRecord"];
        fields__set[0] |= 0x20; 
    }
    return self.contactRecord__v;
}
        

-(void)setContactRecord:(ZKSObject *)v {
    self.contactRecord__v = v;
    fields__set[0] |= 0x20; 
}
        

-(NSString *)convertedStatus {
    if ((fields__set[0] & 0x40) == 0) {
        self.convertedStatus__v = [self string:@"convertedStatus"];
        fields__set[0] |= 0x40; 
    }
    return self.convertedStatus__v;
}
        

-(void)setConvertedStatus:(NSString *)v {
    self.convertedStatus__v = v;
    fields__set[0] |= 0x40; 
}
        

-(BOOL)doNotCreateOpportunity {
    if ((fields__set[0] & 0x80) == 0) {
        self.doNotCreateOpportunity__v = [self boolean:@"doNotCreateOpportunity"];
        fields__set[0] |= 0x80; 
    }
    return self.doNotCreateOpportunity__v;
}
        

-(void)setDoNotCreateOpportunity:(BOOL)v {
    self.doNotCreateOpportunity__v = v;
    fields__set[0] |= 0x80; 
}
        

-(NSString *)leadId {
    if ((fields__set[0] & 0x100) == 0) {
        self.leadId__v = [self string:@"leadId"];
        fields__set[0] |= 0x100; 
    }
    return self.leadId__v;
}
        

-(void)setLeadId:(NSString *)v {
    self.leadId__v = v;
    fields__set[0] |= 0x100; 
}
        

-(NSString *)opportunityId {
    if ((fields__set[0] & 0x200) == 0) {
        self.opportunityId__v = [self string:@"opportunityId"];
        fields__set[0] |= 0x200; 
    }
    return self.opportunityId__v;
}
        

-(void)setOpportunityId:(NSString *)v {
    self.opportunityId__v = v;
    fields__set[0] |= 0x200; 
}
        

-(NSString *)opportunityName {
    if ((fields__set[0] & 0x400) == 0) {
        self.opportunityName__v = [self string:@"opportunityName"];
        fields__set[0] |= 0x400; 
    }
    return self.opportunityName__v;
}
        

-(void)setOpportunityName:(NSString *)v {
    self.opportunityName__v = v;
    fields__set[0] |= 0x400; 
}
        

-(ZKSObject *)opportunityRecord {
    if ((fields__set[0] & 0x800) == 0) {
        self.opportunityRecord__v = [self sObject:@"opportunityRecord"];
        fields__set[0] |= 0x800; 
    }
    return self.opportunityRecord__v;
}
        

-(void)setOpportunityRecord:(ZKSObject *)v {
    self.opportunityRecord__v = v;
    fields__set[0] |= 0x800; 
}
        

-(BOOL)overwriteLeadSource {
    if ((fields__set[0] & 0x1000) == 0) {
        self.overwriteLeadSource__v = [self boolean:@"overwriteLeadSource"];
        fields__set[0] |= 0x1000; 
    }
    return self.overwriteLeadSource__v;
}
        

-(void)setOverwriteLeadSource:(BOOL)v {
    self.overwriteLeadSource__v = v;
    fields__set[0] |= 0x1000; 
}
        

-(NSString *)ownerId {
    if ((fields__set[0] & 0x2000) == 0) {
        self.ownerId__v = [self string:@"ownerId"];
        fields__set[0] |= 0x2000; 
    }
    return self.ownerId__v;
}
        

-(void)setOwnerId:(NSString *)v {
    self.ownerId__v = v;
    fields__set[0] |= 0x2000; 
}
        

-(NSString *)relatedPersonAccountId {
    if ((fields__set[0] & 0x4000) == 0) {
        self.relatedPersonAccountId__v = [self string:@"relatedPersonAccountId"];
        fields__set[0] |= 0x4000; 
    }
    return self.relatedPersonAccountId__v;
}
        

-(void)setRelatedPersonAccountId:(NSString *)v {
    self.relatedPersonAccountId__v = v;
    fields__set[0] |= 0x4000; 
}
        

-(ZKSObject *)relatedPersonAccountRecord {
    if ((fields__set[0] & 0x8000) == 0) {
        self.relatedPersonAccountRecord__v = [self sObject:@"relatedPersonAccountRecord"];
        fields__set[0] |= 0x8000; 
    }
    return self.relatedPersonAccountRecord__v;
}
        

-(void)setRelatedPersonAccountRecord:(ZKSObject *)v {
    self.relatedPersonAccountRecord__v = v;
    fields__set[0] |= 0x8000; 
}
        

-(BOOL)sendNotificationEmail {
    if ((fields__set[0] & 0x10000) == 0) {
        self.sendNotificationEmail__v = [self boolean:@"sendNotificationEmail"];
        fields__set[0] |= 0x10000; 
    }
    return self.sendNotificationEmail__v;
}
        

-(void)setSendNotificationEmail:(BOOL)v {
    self.sendNotificationEmail__v = v;
    fields__set[0] |= 0x10000; 
}
        
-(void)serializeTo:(ZKXmlWriter *)env elemName:(NSString *)elemName {
	[env startElement:elemName];
	[env addElement:@"accountId"                    elemValue:self.accountId                  nillable:YES optional:NO];
	[env addElement:@"accountRecord"                elemValue:self.accountRecord              nillable:YES optional:NO];
	[env addBoolElement:@"bypassAccountDedupeCheck" elemValue:self.bypassAccountDedupeCheck];
	[env addBoolElement:@"bypassContactDedupeCheck" elemValue:self.bypassContactDedupeCheck];
	[env addElement:@"contactId"                    elemValue:self.contactId                  nillable:YES optional:NO];
	[env addElement:@"contactRecord"                elemValue:self.contactRecord              nillable:YES optional:NO];
	[env addElement:@"convertedStatus"              elemValue:self.convertedStatus            nillable:NO  optional:NO];
	[env addBoolElement:@"doNotCreateOpportunity"   elemValue:self.doNotCreateOpportunity];
	[env addElement:@"leadId"                       elemValue:self.leadId                     nillable:NO  optional:NO];
	[env addElement:@"opportunityId"                elemValue:self.opportunityId              nillable:YES optional:NO];
	[env addElement:@"opportunityName"              elemValue:self.opportunityName            nillable:YES optional:NO];
	[env addElement:@"opportunityRecord"            elemValue:self.opportunityRecord          nillable:YES optional:NO];
	[env addBoolElement:@"overwriteLeadSource"      elemValue:self.overwriteLeadSource];
	[env addElement:@"ownerId"                      elemValue:self.ownerId                    nillable:YES optional:NO];
	[env addElement:@"relatedPersonAccountId"       elemValue:self.relatedPersonAccountId     nillable:YES optional:NO];
	[env addElement:@"relatedPersonAccountRecord"   elemValue:self.relatedPersonAccountRecord nillable:YES optional:NO];
	[env addBoolElement:@"sendNotificationEmail"    elemValue:self.sendNotificationEmail];
	[env endElement:elemName];
}
@end
