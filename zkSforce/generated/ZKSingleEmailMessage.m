// Copyright (c) 2013 Simon Fell
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
// 
// Note: This file was generated by WSDL2ZKSforce.
//		  see https://github.com/superfell/WSDL2ZKSforce
//       DO NOT HAND EDIT.
//

#import "ZKSingleEmailMessage.h"
#import "ZKEnvelope.h"
#import "ZKEmailFileAttachment.h"

@interface ZKSingleEmailMessage()
@property (strong,nonatomic) NSArray   *bccAddresses__v;
@property (strong,nonatomic) NSArray   *ccAddresses__v;
@property (strong,nonatomic) NSString  *charset__v;
@property (strong,nonatomic) NSArray   *documentAttachments__v;
@property (strong,nonatomic) NSArray   *entityAttachments__v;
@property (strong,nonatomic) NSArray   *fileAttachments__v;
@property (strong,nonatomic) NSString  *htmlBody__v;
@property (strong,nonatomic) NSString  *inReplyTo__v;
@property (strong,nonatomic) NSString  *optOutPolicy__v;
@property (strong,nonatomic) NSString  *orgWideEmailAddressId__v;
@property (strong,nonatomic) NSString  *plainTextBody__v;
@property (strong,nonatomic) NSString  *references__v;
@property (strong,nonatomic) NSString  *targetObjectId__v;
@property (strong,nonatomic) NSString  *templateId__v;
@property (strong,nonatomic) NSString  *templateName__v;
@property (strong,nonatomic) NSArray   *toAddresses__v;
@property (assign,nonatomic) BOOL       treatBodiesAsTemplate__v;
@property (assign,nonatomic) BOOL       treatTargetObjectAsRecipient__v;
@property (strong,nonatomic) NSString  *whatId__v;
@end

@implementation ZKSingleEmailMessage


+(void)load {
    [self registerType:self xmlName:@"SingleEmailMessage"];
}

-(NSArray *)bccAddresses {
    if ((fields__set2[0] & 0x1) == 0) {
        self.bccAddresses__v = [self strings:@"bccAddresses"];
        fields__set2[0] |= 0x1; 
    }
    return self.bccAddresses__v;
}
        

-(void)setBccAddresses:(NSArray *)v {
    self.bccAddresses__v = v;
    fields__set2[0] |= 0x1; 
}
        

-(NSArray *)ccAddresses {
    if ((fields__set2[0] & 0x2) == 0) {
        self.ccAddresses__v = [self strings:@"ccAddresses"];
        fields__set2[0] |= 0x2; 
    }
    return self.ccAddresses__v;
}
        

-(void)setCcAddresses:(NSArray *)v {
    self.ccAddresses__v = v;
    fields__set2[0] |= 0x2; 
}
        

-(NSString *)charset {
    if ((fields__set2[0] & 0x4) == 0) {
        self.charset__v = [self string:@"charset"];
        fields__set2[0] |= 0x4; 
    }
    return self.charset__v;
}
        

-(void)setCharset:(NSString *)v {
    self.charset__v = v;
    fields__set2[0] |= 0x4; 
}
        

-(NSArray *)documentAttachments {
    if ((fields__set2[0] & 0x8) == 0) {
        self.documentAttachments__v = [self strings:@"documentAttachments"];
        fields__set2[0] |= 0x8; 
    }
    return self.documentAttachments__v;
}
        

-(void)setDocumentAttachments:(NSArray *)v {
    self.documentAttachments__v = v;
    fields__set2[0] |= 0x8; 
}
        

-(NSArray *)entityAttachments {
    if ((fields__set2[0] & 0x10) == 0) {
        self.entityAttachments__v = [self strings:@"entityAttachments"];
        fields__set2[0] |= 0x10; 
    }
    return self.entityAttachments__v;
}
        

-(void)setEntityAttachments:(NSArray *)v {
    self.entityAttachments__v = v;
    fields__set2[0] |= 0x10; 
}
        

-(NSArray *)fileAttachments {
    if ((fields__set2[0] & 0x20) == 0) {
        self.fileAttachments__v = [self complexTypeArrayFromElements:@"fileAttachments" cls:[ZKEmailFileAttachment class]];
        fields__set2[0] |= 0x20; 
    }
    return self.fileAttachments__v;
}
        

-(void)setFileAttachments:(NSArray *)v {
    self.fileAttachments__v = v;
    fields__set2[0] |= 0x20; 
}
        

-(NSString *)htmlBody {
    if ((fields__set2[0] & 0x40) == 0) {
        self.htmlBody__v = [self string:@"htmlBody"];
        fields__set2[0] |= 0x40; 
    }
    return self.htmlBody__v;
}
        

-(void)setHtmlBody:(NSString *)v {
    self.htmlBody__v = v;
    fields__set2[0] |= 0x40; 
}
        

-(NSString *)inReplyTo {
    if ((fields__set2[0] & 0x80) == 0) {
        self.inReplyTo__v = [self string:@"inReplyTo"];
        fields__set2[0] |= 0x80; 
    }
    return self.inReplyTo__v;
}
        

-(void)setInReplyTo:(NSString *)v {
    self.inReplyTo__v = v;
    fields__set2[0] |= 0x80; 
}
        

-(NSString *)optOutPolicy {
    if ((fields__set2[0] & 0x100) == 0) {
        self.optOutPolicy__v = [self string:@"optOutPolicy"];
        fields__set2[0] |= 0x100; 
    }
    return self.optOutPolicy__v;
}
        

-(void)setOptOutPolicy:(NSString *)v {
    self.optOutPolicy__v = v;
    fields__set2[0] |= 0x100; 
}
        

-(NSString *)orgWideEmailAddressId {
    if ((fields__set2[0] & 0x200) == 0) {
        self.orgWideEmailAddressId__v = [self string:@"orgWideEmailAddressId"];
        fields__set2[0] |= 0x200; 
    }
    return self.orgWideEmailAddressId__v;
}
        

-(void)setOrgWideEmailAddressId:(NSString *)v {
    self.orgWideEmailAddressId__v = v;
    fields__set2[0] |= 0x200; 
}
        

-(NSString *)plainTextBody {
    if ((fields__set2[0] & 0x400) == 0) {
        self.plainTextBody__v = [self string:@"plainTextBody"];
        fields__set2[0] |= 0x400; 
    }
    return self.plainTextBody__v;
}
        

-(void)setPlainTextBody:(NSString *)v {
    self.plainTextBody__v = v;
    fields__set2[0] |= 0x400; 
}
        

-(NSString *)references {
    if ((fields__set2[0] & 0x800) == 0) {
        self.references__v = [self string:@"references"];
        fields__set2[0] |= 0x800; 
    }
    return self.references__v;
}
        

-(void)setReferences:(NSString *)v {
    self.references__v = v;
    fields__set2[0] |= 0x800; 
}
        

-(NSString *)targetObjectId {
    if ((fields__set2[0] & 0x1000) == 0) {
        self.targetObjectId__v = [self string:@"targetObjectId"];
        fields__set2[0] |= 0x1000; 
    }
    return self.targetObjectId__v;
}
        

-(void)setTargetObjectId:(NSString *)v {
    self.targetObjectId__v = v;
    fields__set2[0] |= 0x1000; 
}
        

-(NSString *)templateId {
    if ((fields__set2[0] & 0x2000) == 0) {
        self.templateId__v = [self string:@"templateId"];
        fields__set2[0] |= 0x2000; 
    }
    return self.templateId__v;
}
        

-(void)setTemplateId:(NSString *)v {
    self.templateId__v = v;
    fields__set2[0] |= 0x2000; 
}
        

-(NSString *)templateName {
    if ((fields__set2[0] & 0x4000) == 0) {
        self.templateName__v = [self string:@"templateName"];
        fields__set2[0] |= 0x4000; 
    }
    return self.templateName__v;
}
        

-(void)setTemplateName:(NSString *)v {
    self.templateName__v = v;
    fields__set2[0] |= 0x4000; 
}
        

-(NSArray *)toAddresses {
    if ((fields__set2[0] & 0x8000) == 0) {
        self.toAddresses__v = [self strings:@"toAddresses"];
        fields__set2[0] |= 0x8000; 
    }
    return self.toAddresses__v;
}
        

-(void)setToAddresses:(NSArray *)v {
    self.toAddresses__v = v;
    fields__set2[0] |= 0x8000; 
}
        

-(BOOL)treatBodiesAsTemplate {
    if ((fields__set2[0] & 0x10000) == 0) {
        self.treatBodiesAsTemplate__v = [self boolean:@"treatBodiesAsTemplate"];
        fields__set2[0] |= 0x10000; 
    }
    return self.treatBodiesAsTemplate__v;
}
        

-(void)setTreatBodiesAsTemplate:(BOOL)v {
    self.treatBodiesAsTemplate__v = v;
    fields__set2[0] |= 0x10000; 
}
        

-(BOOL)treatTargetObjectAsRecipient {
    if ((fields__set2[0] & 0x20000) == 0) {
        self.treatTargetObjectAsRecipient__v = [self boolean:@"treatTargetObjectAsRecipient"];
        fields__set2[0] |= 0x20000; 
    }
    return self.treatTargetObjectAsRecipient__v;
}
        

-(void)setTreatTargetObjectAsRecipient:(BOOL)v {
    self.treatTargetObjectAsRecipient__v = v;
    fields__set2[0] |= 0x20000; 
}
        

-(NSString *)whatId {
    if ((fields__set2[0] & 0x40000) == 0) {
        self.whatId__v = [self string:@"whatId"];
        fields__set2[0] |= 0x40000; 
    }
    return self.whatId__v;
}
        

-(void)setWhatId:(NSString *)v {
    self.whatId__v = v;
    fields__set2[0] |= 0x40000; 
}
        
-(void)serializeTo:(ZKXmlWriter *)env elemName:(NSString *)elemName {
	[env startElement:elemName type:@"SingleEmailMessage"];
	[env addBoolElement:@"bccSender"                    elemValue:self.bccSender];
	[env addElement:@"emailPriority"                    elemValue:self.emailPriority                nillable:YES optional:NO];
	[env addElement:@"replyTo"                          elemValue:self.replyTo                      nillable:YES optional:NO];
	[env addBoolElement:@"saveAsActivity"               elemValue:self.saveAsActivity];
	[env addElement:@"senderDisplayName"                elemValue:self.senderDisplayName            nillable:YES optional:NO];
	[env addElement:@"subject"                          elemValue:self.subject                      nillable:YES optional:NO];
	[env addBoolElement:@"useSignature"                 elemValue:self.useSignature];
	[env addElementArray:@"bccAddresses"                elemValue:self.bccAddresses];
	[env addElementArray:@"ccAddresses"                 elemValue:self.ccAddresses];
	[env addElement:@"charset"                          elemValue:self.charset                      nillable:YES optional:NO];
	[env addElementArray:@"documentAttachments"         elemValue:self.documentAttachments];
	[env addElementArray:@"entityAttachments"           elemValue:self.entityAttachments];
	[env addElementArray:@"fileAttachments"             elemValue:self.fileAttachments];
	[env addElement:@"htmlBody"                         elemValue:self.htmlBody                     nillable:YES optional:NO];
	[env addElement:@"inReplyTo"                        elemValue:self.inReplyTo                    nillable:YES optional:YES];
	[env addElement:@"optOutPolicy"                     elemValue:self.optOutPolicy                 nillable:YES optional:NO];
	[env addElement:@"orgWideEmailAddressId"            elemValue:self.orgWideEmailAddressId        nillable:YES optional:YES];
	[env addElement:@"plainTextBody"                    elemValue:self.plainTextBody                nillable:YES optional:NO];
	[env addElement:@"references"                       elemValue:self.references                   nillable:YES optional:YES];
	[env addElement:@"targetObjectId"                   elemValue:self.targetObjectId               nillable:YES optional:NO];
	[env addElement:@"templateId"                       elemValue:self.templateId                   nillable:YES optional:NO];
	[env addElement:@"templateName"                     elemValue:self.templateName                 nillable:YES optional:YES];
	[env addElementArray:@"toAddresses"                 elemValue:self.toAddresses];
	[env addBoolElement:@"treatBodiesAsTemplate"        elemValue:self.treatBodiesAsTemplate];
	[env addBoolElement:@"treatTargetObjectAsRecipient" elemValue:self.treatTargetObjectAsRecipient];
	[env addElement:@"whatId"                           elemValue:self.whatId                       nillable:YES optional:NO];
	[env endElement:elemName];
}
@end
